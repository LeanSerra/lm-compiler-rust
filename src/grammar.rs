/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use rustemo::LRBuilder;
use super::grammar_actions;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use rustemo::colored::*;
pub type Input = str;
const STATE_COUNT: usize = 115usize;
const MAX_RECOGNIZERS: usize = 22usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 40usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    TokenInt,
    TokenFloat,
    TokenString,
    TokenIntLiteral,
    TokenFloatLiteral,
    TokenStringLiteral,
    TokenId,
    TokenAssign,
    TokenSum,
    TokenMul,
    TokenSub,
    TokenDiv,
    TokenParOpen,
    TokenParClose,
    TokenCBOpen,
    TokenCBClose,
    TokenSemicolon,
    TokenColon,
    TokenInit,
    TokenWhile,
    TokenEqual,
    TokenNotEqual,
    TokenLess,
    TokenLessEqual,
    TokenGreater,
    TokenGreaterEqual,
    TokenTrue,
    TokenFalse,
    TokenIf,
    TokenElse,
    TokenComma,
    TokenAnd,
    TokenOr,
    TokenNot,
    TokenRead,
    TokenWrite,
    TokenIsZero,
    TokenConvDate,
    TokenDate,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    ProgramProgramWithMain,
    ProgramProgramOnlyBody,
    BodyBodyInitExpressions,
    BodyBodyInit,
    BodyBodyExpressions,
    BodyBodyEmpty,
    InitBodyInitBody,
    FunctionReadFunctionReadCall,
    FunctionWriteFunctionWriteCall,
    FunctionIsZeroFunctionIsZeroCall,
    FunctionConvDateFunctionConvDateVariableCall,
    VarDeclarationsVarDeclarationsSingle,
    VarDeclarationsVarDeclarationsRecursive,
    VarDeclarationVarDeclarationSingle,
    VarDeclarationVarDeclarationRecursive,
    ExpressionsExpressionSingle,
    ExpressionsExpressionRecursive,
    StatementStatementAssignment,
    StatementStatementIfStatement,
    StatementStatementElseStatement,
    StatementStatementWhile,
    StatementStatementWrite,
    StatementStatementRead,
    StatementStatementConvDate,
    AssignmentAssignment,
    DataTypeIntType,
    DataTypeFloatType,
    DataTypeStringType,
    WhileLoopWhile,
    IfStatementIfStatement,
    ElseStatementElseStatement,
    BooleanExpressionBooleanExpressionSimpleExpression,
    BooleanExpressionBooleanExpressionTrue,
    BooleanExpressionBooleanExpressionFalse,
    BooleanExpressionBooleanExpressionSimpleExpressionRecursive,
    BooleanExpressionBooleanExpressionNotStatement,
    BooleanExpressionBooleanExpressionIsZero,
    BooleanExpressionChainBooleanExpressionChainAux,
    BooleanExpressionChainBooleanExpressionChainEmpty,
    SimpleExpressionSimpleExpressionArithmetic,
    SimpleExpressionSimpleExpressionString,
    ConjunctionConjunctionAnd,
    ConjunctionConjunctionOr,
    ComparisonOpComparisonOpEqual,
    ComparisonOpComparisonOpNotEqual,
    ComparisonOpComparisonOpLess,
    ComparisonOpComparisonOpLessEqual,
    ComparisonOpComparisonOpGreater,
    ComparisonOpComparisonOpGreaterEqual,
    NumberNumberInt,
    NumberNumberFloat,
    NumberNumberNegativeInt,
    NumberNumberNegativeFloat,
    NotStatementNot,
    ArithmeticExpressionArithmeticExpressionSumTerm,
    ArithmeticExpressionArithmeticExpressionSubTerm,
    ArithmeticExpressionArithmeticExpressionTerm,
    TermTermMulFactor,
    TermTermDivFactor,
    TermTermFactor,
    FactorFactorId,
    FactorFactorNumber,
    FactorFactorParen,
    IntegerValueIntegerValueLiteral,
    IntegerValueIntegerValueId,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ProgramProgramWithMain => {
                "Program: TokenId TokenParOpen TokenParClose TokenCBOpen Body TokenCBClose"
            }
            ProdKind::ProgramProgramOnlyBody => "Program: Body",
            ProdKind::BodyBodyInitExpressions => "Body: TokenInit InitBody Expressions",
            ProdKind::BodyBodyInit => "Body: TokenInit InitBody",
            ProdKind::BodyBodyExpressions => "Body: Expressions",
            ProdKind::BodyBodyEmpty => "Body: ",
            ProdKind::InitBodyInitBody => {
                "InitBody: TokenCBOpen VarDeclarations TokenCBClose"
            }
            ProdKind::FunctionReadFunctionReadCall => {
                "FunctionRead: TokenRead TokenParOpen TokenId TokenParClose"
            }
            ProdKind::FunctionWriteFunctionWriteCall => {
                "FunctionWrite: TokenWrite TokenParOpen SimpleExpression TokenParClose"
            }
            ProdKind::FunctionIsZeroFunctionIsZeroCall => {
                "FunctionIsZero: TokenIsZero TokenParOpen ArithmeticExpression TokenParClose"
            }
            ProdKind::FunctionConvDateFunctionConvDateVariableCall => {
                "FunctionConvDate: TokenConvDate TokenParOpen TokenDate TokenParClose"
            }
            ProdKind::VarDeclarationsVarDeclarationsSingle => {
                "VarDeclarations: VarDeclaration"
            }
            ProdKind::VarDeclarationsVarDeclarationsRecursive => {
                "VarDeclarations: VarDeclaration VarDeclarations"
            }
            ProdKind::VarDeclarationVarDeclarationSingle => {
                "VarDeclaration: TokenId TokenColon DataType"
            }
            ProdKind::VarDeclarationVarDeclarationRecursive => {
                "VarDeclaration: TokenId TokenComma VarDeclaration"
            }
            ProdKind::ExpressionsExpressionSingle => "Expressions: Statement",
            ProdKind::ExpressionsExpressionRecursive => {
                "Expressions: Statement Expressions"
            }
            ProdKind::StatementStatementAssignment => "Statement: Assignment",
            ProdKind::StatementStatementIfStatement => "Statement: IfStatement",
            ProdKind::StatementStatementElseStatement => "Statement: ElseStatement",
            ProdKind::StatementStatementWhile => "Statement: WhileLoop",
            ProdKind::StatementStatementWrite => "Statement: FunctionWrite",
            ProdKind::StatementStatementRead => "Statement: FunctionRead",
            ProdKind::StatementStatementConvDate => "Statement: FunctionConvDate",
            ProdKind::AssignmentAssignment => {
                "Assignment: TokenId TokenAssign SimpleExpression"
            }
            ProdKind::DataTypeIntType => "DataType: TokenInt",
            ProdKind::DataTypeFloatType => "DataType: TokenFloat",
            ProdKind::DataTypeStringType => "DataType: TokenString",
            ProdKind::WhileLoopWhile => {
                "WhileLoop: TokenWhile TokenParOpen BooleanExpression TokenParClose TokenCBOpen Body TokenCBClose"
            }
            ProdKind::IfStatementIfStatement => {
                "IfStatement: TokenIf TokenParOpen BooleanExpression TokenParClose TokenCBOpen Body TokenCBClose"
            }
            ProdKind::ElseStatementElseStatement => {
                "ElseStatement: TokenElse TokenCBOpen Body TokenCBClose"
            }
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpression => {
                "BooleanExpression: SimpleExpression BooleanExpressionChain"
            }
            ProdKind::BooleanExpressionBooleanExpressionTrue => {
                "BooleanExpression: TokenTrue"
            }
            ProdKind::BooleanExpressionBooleanExpressionFalse => {
                "BooleanExpression: TokenFalse"
            }
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpressionRecursive => {
                "BooleanExpression: SimpleExpression BooleanExpressionChain Conjunction BooleanExpression"
            }
            ProdKind::BooleanExpressionBooleanExpressionNotStatement => {
                "BooleanExpression: NotStatement"
            }
            ProdKind::BooleanExpressionBooleanExpressionIsZero => {
                "BooleanExpression: FunctionIsZero"
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainAux => {
                "BooleanExpressionChain: ComparisonOp SimpleExpression BooleanExpressionChain"
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainEmpty => {
                "BooleanExpressionChain: "
            }
            ProdKind::SimpleExpressionSimpleExpressionArithmetic => {
                "SimpleExpression: ArithmeticExpression"
            }
            ProdKind::SimpleExpressionSimpleExpressionString => {
                "SimpleExpression: TokenStringLiteral"
            }
            ProdKind::ConjunctionConjunctionAnd => "Conjunction: TokenAnd",
            ProdKind::ConjunctionConjunctionOr => "Conjunction: TokenOr",
            ProdKind::ComparisonOpComparisonOpEqual => "ComparisonOp: TokenEqual",
            ProdKind::ComparisonOpComparisonOpNotEqual => "ComparisonOp: TokenNotEqual",
            ProdKind::ComparisonOpComparisonOpLess => "ComparisonOp: TokenLess",
            ProdKind::ComparisonOpComparisonOpLessEqual => "ComparisonOp: TokenLessEqual",
            ProdKind::ComparisonOpComparisonOpGreater => "ComparisonOp: TokenGreater",
            ProdKind::ComparisonOpComparisonOpGreaterEqual => {
                "ComparisonOp: TokenGreaterEqual"
            }
            ProdKind::NumberNumberInt => "Number: TokenIntLiteral",
            ProdKind::NumberNumberFloat => "Number: TokenFloatLiteral",
            ProdKind::NumberNumberNegativeInt => "Number: TokenSub TokenIntLiteral",
            ProdKind::NumberNumberNegativeFloat => "Number: TokenSub TokenFloatLiteral",
            ProdKind::NotStatementNot => "NotStatement: TokenNot BooleanExpression",
            ProdKind::ArithmeticExpressionArithmeticExpressionSumTerm => {
                "ArithmeticExpression: ArithmeticExpression TokenSum Term"
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionSubTerm => {
                "ArithmeticExpression: ArithmeticExpression TokenSub Term"
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionTerm => {
                "ArithmeticExpression: Term"
            }
            ProdKind::TermTermMulFactor => "Term: Term TokenMul Factor",
            ProdKind::TermTermDivFactor => "Term: Term TokenDiv Factor",
            ProdKind::TermTermFactor => "Term: Factor",
            ProdKind::FactorFactorId => "Factor: TokenId",
            ProdKind::FactorFactorNumber => "Factor: Number",
            ProdKind::FactorFactorParen => {
                "Factor: TokenParOpen ArithmeticExpression TokenParClose"
            }
            ProdKind::IntegerValueIntegerValueLiteral => "IntegerValue: TokenIntLiteral",
            ProdKind::IntegerValueIntegerValueId => "IntegerValue: TokenId",
        };
        write!(f, "{name}")
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Program,
    Body,
    InitBody,
    FunctionRead,
    FunctionWrite,
    FunctionIsZero,
    FunctionConvDate,
    VarDeclarations,
    VarDeclaration,
    Expressions,
    Statement,
    Assignment,
    DataType,
    WhileLoop,
    IfStatement,
    ElseStatement,
    BooleanExpression,
    BooleanExpressionChain,
    SimpleExpression,
    Conjunction,
    ComparisonOp,
    Number,
    NotStatement,
    ArithmeticExpression,
    Term,
    Factor,
    IntegerValue,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ProgramProgramWithMain => NonTermKind::Program,
            ProdKind::ProgramProgramOnlyBody => NonTermKind::Program,
            ProdKind::BodyBodyInitExpressions => NonTermKind::Body,
            ProdKind::BodyBodyInit => NonTermKind::Body,
            ProdKind::BodyBodyExpressions => NonTermKind::Body,
            ProdKind::BodyBodyEmpty => NonTermKind::Body,
            ProdKind::InitBodyInitBody => NonTermKind::InitBody,
            ProdKind::FunctionReadFunctionReadCall => NonTermKind::FunctionRead,
            ProdKind::FunctionWriteFunctionWriteCall => NonTermKind::FunctionWrite,
            ProdKind::FunctionIsZeroFunctionIsZeroCall => NonTermKind::FunctionIsZero,
            ProdKind::FunctionConvDateFunctionConvDateVariableCall => {
                NonTermKind::FunctionConvDate
            }
            ProdKind::VarDeclarationsVarDeclarationsSingle => {
                NonTermKind::VarDeclarations
            }
            ProdKind::VarDeclarationsVarDeclarationsRecursive => {
                NonTermKind::VarDeclarations
            }
            ProdKind::VarDeclarationVarDeclarationSingle => NonTermKind::VarDeclaration,
            ProdKind::VarDeclarationVarDeclarationRecursive => {
                NonTermKind::VarDeclaration
            }
            ProdKind::ExpressionsExpressionSingle => NonTermKind::Expressions,
            ProdKind::ExpressionsExpressionRecursive => NonTermKind::Expressions,
            ProdKind::StatementStatementAssignment => NonTermKind::Statement,
            ProdKind::StatementStatementIfStatement => NonTermKind::Statement,
            ProdKind::StatementStatementElseStatement => NonTermKind::Statement,
            ProdKind::StatementStatementWhile => NonTermKind::Statement,
            ProdKind::StatementStatementWrite => NonTermKind::Statement,
            ProdKind::StatementStatementRead => NonTermKind::Statement,
            ProdKind::StatementStatementConvDate => NonTermKind::Statement,
            ProdKind::AssignmentAssignment => NonTermKind::Assignment,
            ProdKind::DataTypeIntType => NonTermKind::DataType,
            ProdKind::DataTypeFloatType => NonTermKind::DataType,
            ProdKind::DataTypeStringType => NonTermKind::DataType,
            ProdKind::WhileLoopWhile => NonTermKind::WhileLoop,
            ProdKind::IfStatementIfStatement => NonTermKind::IfStatement,
            ProdKind::ElseStatementElseStatement => NonTermKind::ElseStatement,
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpression => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionTrue => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionFalse => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpressionRecursive => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionNotStatement => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionIsZero => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainAux => {
                NonTermKind::BooleanExpressionChain
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainEmpty => {
                NonTermKind::BooleanExpressionChain
            }
            ProdKind::SimpleExpressionSimpleExpressionArithmetic => {
                NonTermKind::SimpleExpression
            }
            ProdKind::SimpleExpressionSimpleExpressionString => {
                NonTermKind::SimpleExpression
            }
            ProdKind::ConjunctionConjunctionAnd => NonTermKind::Conjunction,
            ProdKind::ConjunctionConjunctionOr => NonTermKind::Conjunction,
            ProdKind::ComparisonOpComparisonOpEqual => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpNotEqual => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpLess => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpLessEqual => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpGreater => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpGreaterEqual => NonTermKind::ComparisonOp,
            ProdKind::NumberNumberInt => NonTermKind::Number,
            ProdKind::NumberNumberFloat => NonTermKind::Number,
            ProdKind::NumberNumberNegativeInt => NonTermKind::Number,
            ProdKind::NumberNumberNegativeFloat => NonTermKind::Number,
            ProdKind::NotStatementNot => NonTermKind::NotStatement,
            ProdKind::ArithmeticExpressionArithmeticExpressionSumTerm => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionSubTerm => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionTerm => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::TermTermMulFactor => NonTermKind::Term,
            ProdKind::TermTermDivFactor => NonTermKind::Term,
            ProdKind::TermTermFactor => NonTermKind::Term,
            ProdKind::FactorFactorId => NonTermKind::Factor,
            ProdKind::FactorFactorNumber => NonTermKind::Factor,
            ProdKind::FactorFactorParen => NonTermKind::Factor,
            ProdKind::IntegerValueIntegerValueLiteral => NonTermKind::IntegerValue,
            ProdKind::IntegerValueIntegerValueId => NonTermKind::IntegerValue,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    TokenIdS1,
    TokenInitS2,
    TokenWhileS3,
    TokenIfS4,
    TokenElseS5,
    TokenReadS6,
    TokenWriteS7,
    TokenConvDateS8,
    ProgramS9,
    BodyS10,
    FunctionReadS11,
    FunctionWriteS12,
    FunctionConvDateS13,
    ExpressionsS14,
    StatementS15,
    AssignmentS16,
    WhileLoopS17,
    IfStatementS18,
    ElseStatementS19,
    TokenAssignS20,
    TokenParOpenS21,
    TokenCBOpenS22,
    InitBodyS23,
    TokenParOpenS24,
    TokenParOpenS25,
    TokenCBOpenS26,
    TokenParOpenS27,
    TokenParOpenS28,
    TokenParOpenS29,
    TokenIdS30,
    ExpressionsS31,
    TokenIntLiteralS32,
    TokenFloatLiteralS33,
    TokenStringLiteralS34,
    TokenIdS35,
    TokenSubS36,
    TokenParOpenS37,
    SimpleExpressionS38,
    NumberS39,
    ArithmeticExpressionS40,
    TermS41,
    FactorS42,
    TokenParCloseS43,
    TokenIdS44,
    VarDeclarationsS45,
    VarDeclarationS46,
    ExpressionsS47,
    TokenTrueS48,
    TokenFalseS49,
    TokenNotS50,
    TokenIsZeroS51,
    FunctionIsZeroS52,
    BooleanExpressionS53,
    SimpleExpressionS54,
    NotStatementS55,
    BooleanExpressionS56,
    BodyS57,
    TokenIdS58,
    SimpleExpressionS59,
    TokenDateS60,
    TokenIntLiteralS61,
    TokenFloatLiteralS62,
    ArithmeticExpressionS63,
    TokenSumS64,
    TokenSubS65,
    TokenMulS66,
    TokenDivS67,
    TokenCBOpenS68,
    TokenColonS69,
    TokenCommaS70,
    TokenCBCloseS71,
    VarDeclarationsS72,
    BooleanExpressionS73,
    TokenParOpenS74,
    TokenParCloseS75,
    TokenEqualS76,
    TokenNotEqualS77,
    TokenLessS78,
    TokenLessEqualS79,
    TokenGreaterS80,
    TokenGreaterEqualS81,
    BooleanExpressionChainS82,
    ComparisonOpS83,
    TokenParCloseS84,
    TokenCBCloseS85,
    TokenParCloseS86,
    TokenParCloseS87,
    TokenParCloseS88,
    TokenParCloseS89,
    TermS90,
    TermS91,
    FactorS92,
    FactorS93,
    BodyS94,
    TokenIntS95,
    TokenFloatS96,
    TokenStringS97,
    DataTypeS98,
    VarDeclarationS99,
    ArithmeticExpressionS100,
    TokenCBOpenS101,
    TokenAndS102,
    TokenOrS103,
    ConjunctionS104,
    SimpleExpressionS105,
    TokenCBOpenS106,
    TokenCBCloseS107,
    TokenParCloseS108,
    BodyS109,
    BooleanExpressionS110,
    BooleanExpressionChainS111,
    BodyS112,
    TokenCBCloseS113,
    TokenCBCloseS114,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::TokenIdS1 => "1:TokenId",
            State::TokenInitS2 => "2:TokenInit",
            State::TokenWhileS3 => "3:TokenWhile",
            State::TokenIfS4 => "4:TokenIf",
            State::TokenElseS5 => "5:TokenElse",
            State::TokenReadS6 => "6:TokenRead",
            State::TokenWriteS7 => "7:TokenWrite",
            State::TokenConvDateS8 => "8:TokenConvDate",
            State::ProgramS9 => "9:Program",
            State::BodyS10 => "10:Body",
            State::FunctionReadS11 => "11:FunctionRead",
            State::FunctionWriteS12 => "12:FunctionWrite",
            State::FunctionConvDateS13 => "13:FunctionConvDate",
            State::ExpressionsS14 => "14:Expressions",
            State::StatementS15 => "15:Statement",
            State::AssignmentS16 => "16:Assignment",
            State::WhileLoopS17 => "17:WhileLoop",
            State::IfStatementS18 => "18:IfStatement",
            State::ElseStatementS19 => "19:ElseStatement",
            State::TokenAssignS20 => "20:TokenAssign",
            State::TokenParOpenS21 => "21:TokenParOpen",
            State::TokenCBOpenS22 => "22:TokenCBOpen",
            State::InitBodyS23 => "23:InitBody",
            State::TokenParOpenS24 => "24:TokenParOpen",
            State::TokenParOpenS25 => "25:TokenParOpen",
            State::TokenCBOpenS26 => "26:TokenCBOpen",
            State::TokenParOpenS27 => "27:TokenParOpen",
            State::TokenParOpenS28 => "28:TokenParOpen",
            State::TokenParOpenS29 => "29:TokenParOpen",
            State::TokenIdS30 => "30:TokenId",
            State::ExpressionsS31 => "31:Expressions",
            State::TokenIntLiteralS32 => "32:TokenIntLiteral",
            State::TokenFloatLiteralS33 => "33:TokenFloatLiteral",
            State::TokenStringLiteralS34 => "34:TokenStringLiteral",
            State::TokenIdS35 => "35:TokenId",
            State::TokenSubS36 => "36:TokenSub",
            State::TokenParOpenS37 => "37:TokenParOpen",
            State::SimpleExpressionS38 => "38:SimpleExpression",
            State::NumberS39 => "39:Number",
            State::ArithmeticExpressionS40 => "40:ArithmeticExpression",
            State::TermS41 => "41:Term",
            State::FactorS42 => "42:Factor",
            State::TokenParCloseS43 => "43:TokenParClose",
            State::TokenIdS44 => "44:TokenId",
            State::VarDeclarationsS45 => "45:VarDeclarations",
            State::VarDeclarationS46 => "46:VarDeclaration",
            State::ExpressionsS47 => "47:Expressions",
            State::TokenTrueS48 => "48:TokenTrue",
            State::TokenFalseS49 => "49:TokenFalse",
            State::TokenNotS50 => "50:TokenNot",
            State::TokenIsZeroS51 => "51:TokenIsZero",
            State::FunctionIsZeroS52 => "52:FunctionIsZero",
            State::BooleanExpressionS53 => "53:BooleanExpression",
            State::SimpleExpressionS54 => "54:SimpleExpression",
            State::NotStatementS55 => "55:NotStatement",
            State::BooleanExpressionS56 => "56:BooleanExpression",
            State::BodyS57 => "57:Body",
            State::TokenIdS58 => "58:TokenId",
            State::SimpleExpressionS59 => "59:SimpleExpression",
            State::TokenDateS60 => "60:TokenDate",
            State::TokenIntLiteralS61 => "61:TokenIntLiteral",
            State::TokenFloatLiteralS62 => "62:TokenFloatLiteral",
            State::ArithmeticExpressionS63 => "63:ArithmeticExpression",
            State::TokenSumS64 => "64:TokenSum",
            State::TokenSubS65 => "65:TokenSub",
            State::TokenMulS66 => "66:TokenMul",
            State::TokenDivS67 => "67:TokenDiv",
            State::TokenCBOpenS68 => "68:TokenCBOpen",
            State::TokenColonS69 => "69:TokenColon",
            State::TokenCommaS70 => "70:TokenComma",
            State::TokenCBCloseS71 => "71:TokenCBClose",
            State::VarDeclarationsS72 => "72:VarDeclarations",
            State::BooleanExpressionS73 => "73:BooleanExpression",
            State::TokenParOpenS74 => "74:TokenParOpen",
            State::TokenParCloseS75 => "75:TokenParClose",
            State::TokenEqualS76 => "76:TokenEqual",
            State::TokenNotEqualS77 => "77:TokenNotEqual",
            State::TokenLessS78 => "78:TokenLess",
            State::TokenLessEqualS79 => "79:TokenLessEqual",
            State::TokenGreaterS80 => "80:TokenGreater",
            State::TokenGreaterEqualS81 => "81:TokenGreaterEqual",
            State::BooleanExpressionChainS82 => "82:BooleanExpressionChain",
            State::ComparisonOpS83 => "83:ComparisonOp",
            State::TokenParCloseS84 => "84:TokenParClose",
            State::TokenCBCloseS85 => "85:TokenCBClose",
            State::TokenParCloseS86 => "86:TokenParClose",
            State::TokenParCloseS87 => "87:TokenParClose",
            State::TokenParCloseS88 => "88:TokenParClose",
            State::TokenParCloseS89 => "89:TokenParClose",
            State::TermS90 => "90:Term",
            State::TermS91 => "91:Term",
            State::FactorS92 => "92:Factor",
            State::FactorS93 => "93:Factor",
            State::BodyS94 => "94:Body",
            State::TokenIntS95 => "95:TokenInt",
            State::TokenFloatS96 => "96:TokenFloat",
            State::TokenStringS97 => "97:TokenString",
            State::DataTypeS98 => "98:DataType",
            State::VarDeclarationS99 => "99:VarDeclaration",
            State::ArithmeticExpressionS100 => "100:ArithmeticExpression",
            State::TokenCBOpenS101 => "101:TokenCBOpen",
            State::TokenAndS102 => "102:TokenAnd",
            State::TokenOrS103 => "103:TokenOr",
            State::ConjunctionS104 => "104:Conjunction",
            State::SimpleExpressionS105 => "105:SimpleExpression",
            State::TokenCBOpenS106 => "106:TokenCBOpen",
            State::TokenCBCloseS107 => "107:TokenCBClose",
            State::TokenParCloseS108 => "108:TokenParClose",
            State::BodyS109 => "109:Body",
            State::BooleanExpressionS110 => "110:BooleanExpression",
            State::BooleanExpressionChainS111 => "111:BooleanExpressionChain",
            State::BodyS112 => "112:Body",
            State::TokenCBCloseS113 => "113:TokenCBClose",
            State::TokenCBCloseS114 => "114:TokenCBClose",
        };
        write!(f, "{name}")
    }
}
#[derive(Debug)]
pub enum Symbol {
    Terminal(Terminal),
    NonTerminal(NonTerminal),
}
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug)]
pub enum Terminal {
    TokenInt(grammar_actions::TokenInt),
    TokenFloat(grammar_actions::TokenFloat),
    TokenString(grammar_actions::TokenString),
    TokenIntLiteral(grammar_actions::TokenIntLiteral),
    TokenFloatLiteral(grammar_actions::TokenFloatLiteral),
    TokenStringLiteral(grammar_actions::TokenStringLiteral),
    TokenId(grammar_actions::TokenId),
    TokenAssign(grammar_actions::TokenAssign),
    TokenSum(grammar_actions::TokenSum),
    TokenMul(grammar_actions::TokenMul),
    TokenSub(grammar_actions::TokenSub),
    TokenDiv(grammar_actions::TokenDiv),
    TokenParOpen(grammar_actions::TokenParOpen),
    TokenParClose(grammar_actions::TokenParClose),
    TokenCBOpen(grammar_actions::TokenCBOpen),
    TokenCBClose(grammar_actions::TokenCBClose),
    TokenColon(grammar_actions::TokenColon),
    TokenInit(grammar_actions::TokenInit),
    TokenWhile(grammar_actions::TokenWhile),
    TokenEqual(grammar_actions::TokenEqual),
    TokenNotEqual(grammar_actions::TokenNotEqual),
    TokenLess(grammar_actions::TokenLess),
    TokenLessEqual(grammar_actions::TokenLessEqual),
    TokenGreater(grammar_actions::TokenGreater),
    TokenGreaterEqual(grammar_actions::TokenGreaterEqual),
    TokenTrue(grammar_actions::TokenTrue),
    TokenFalse(grammar_actions::TokenFalse),
    TokenIf(grammar_actions::TokenIf),
    TokenElse(grammar_actions::TokenElse),
    TokenComma(grammar_actions::TokenComma),
    TokenAnd(grammar_actions::TokenAnd),
    TokenOr(grammar_actions::TokenOr),
    TokenNot(grammar_actions::TokenNot),
    TokenRead(grammar_actions::TokenRead),
    TokenWrite(grammar_actions::TokenWrite),
    TokenIsZero(grammar_actions::TokenIsZero),
    TokenConvDate(grammar_actions::TokenConvDate),
    TokenDate(grammar_actions::TokenDate),
}
#[derive(Debug)]
pub enum NonTerminal {
    Program(grammar_actions::Program),
    Body(grammar_actions::Body),
    InitBody(grammar_actions::InitBody),
    FunctionRead(grammar_actions::FunctionRead),
    FunctionWrite(grammar_actions::FunctionWrite),
    FunctionIsZero(grammar_actions::FunctionIsZero),
    FunctionConvDate(grammar_actions::FunctionConvDate),
    VarDeclarations(grammar_actions::VarDeclarations),
    VarDeclaration(grammar_actions::VarDeclaration),
    Expressions(grammar_actions::Expressions),
    Statement(grammar_actions::Statement),
    Assignment(grammar_actions::Assignment),
    DataType(grammar_actions::DataType),
    WhileLoop(grammar_actions::WhileLoop),
    IfStatement(grammar_actions::IfStatement),
    ElseStatement(grammar_actions::ElseStatement),
    BooleanExpression(grammar_actions::BooleanExpression),
    BooleanExpressionChain(grammar_actions::BooleanExpressionChain),
    SimpleExpression(grammar_actions::SimpleExpression),
    Conjunction(grammar_actions::Conjunction),
    ComparisonOp(grammar_actions::ComparisonOp),
    Number(grammar_actions::Number),
    NotStatement(grammar_actions::NotStatement),
    ArithmeticExpression(grammar_actions::ArithmeticExpression),
    Term(grammar_actions::Term),
    Factor(grammar_actions::Factor),
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct GrammarParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS1)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        TK::TokenConvDate => Vec::from(&[Shift(State::TokenConvDateS8)]),
        _ => vec![],
    }
}
fn action_tokenid_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenAssign => Vec::from(&[Shift(State::TokenAssignS20)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS21)]),
        _ => vec![],
    }
}
fn action_tokeninit_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS22)]),
        _ => vec![],
    }
}
fn action_tokenwhile_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS24)]),
        _ => vec![],
    }
}
fn action_tokenif_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS25)]),
        _ => vec![],
    }
}
fn action_tokenelse_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS26)]),
        _ => vec![],
    }
}
fn action_tokenread_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS27)]),
        _ => vec![],
    }
}
fn action_tokenwrite_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS28)]),
        _ => vec![],
    }
}
fn action_tokenconvdate_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS29)]),
        _ => vec![],
    }
}
fn action_program_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_body_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ProgramProgramOnlyBody, 1usize)]),
        _ => vec![],
    }
}
fn action_functionread_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        _ => vec![],
    }
}
fn action_functionwrite_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        _ => vec![],
    }
}
fn action_functionconvdate_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::StatementStatementConvDate, 1usize)]),
        _ => vec![],
    }
}
fn action_expressions_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BodyBodyExpressions, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyExpressions, 1usize)]),
        _ => vec![],
    }
}
fn action_statement_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExpressionsExpressionSingle, 1usize)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS30)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::ExpressionsExpressionSingle, 1usize)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        TK::TokenConvDate => Vec::from(&[Shift(State::TokenConvDateS8)]),
        _ => vec![],
    }
}
fn action_assignment_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)])
        }
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenConvDate => {
            Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)])
        }
        _ => vec![],
    }
}
fn action_whileloop_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        _ => vec![],
    }
}
fn action_ifstatement_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)])
        }
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenConvDate => {
            Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)])
        }
        _ => vec![],
    }
}
fn action_elsestatement_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)]),
        TK::TokenElse => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenRead => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenConvDate => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenassign_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS34)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS43)]),
        _ => vec![],
    }
}
fn action_tokencbopen_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS44)]),
        _ => vec![],
    }
}
fn action_initbody_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BodyBodyInit, 2usize)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS30)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyInit, 2usize)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        TK::TokenConvDate => Vec::from(&[Shift(State::TokenConvDateS8)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS34)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        TK::TokenTrue => Vec::from(&[Shift(State::TokenTrueS48)]),
        TK::TokenFalse => Vec::from(&[Shift(State::TokenFalseS49)]),
        TK::TokenNot => Vec::from(&[Shift(State::TokenNotS50)]),
        TK::TokenIsZero => Vec::from(&[Shift(State::TokenIsZeroS51)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS34)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        TK::TokenTrue => Vec::from(&[Shift(State::TokenTrueS48)]),
        TK::TokenFalse => Vec::from(&[Shift(State::TokenFalseS49)]),
        TK::TokenNot => Vec::from(&[Shift(State::TokenNotS50)]),
        TK::TokenIsZero => Vec::from(&[Shift(State::TokenIsZeroS51)]),
        _ => vec![],
    }
}
fn action_tokencbopen_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS30)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        TK::TokenConvDate => Vec::from(&[Shift(State::TokenConvDateS8)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS58)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS34)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenDate => Vec::from(&[Shift(State::TokenDateS60)]),
        _ => vec![],
    }
}
fn action_tokenid_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenAssign => Vec::from(&[Shift(State::TokenAssignS20)]),
        _ => vec![],
    }
}
fn action_expressions_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExpressionsExpressionRecursive, 2usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::ExpressionsExpressionRecursive, 2usize)])
        }
        _ => vec![],
    }
}
fn action_tokenintliteral_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenfloatliteral_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenstringliteral_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenId => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenNotEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenLess => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenLessEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenGreater => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenGreaterEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenIf => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenElse => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenAnd => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenOr => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenRead => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenConvDate => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenid_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        _ => vec![],
    }
}
fn action_tokensub_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS61)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS62)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_simpleexpression_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::AssignmentAssignment, 3usize)]),
        _ => vec![],
    }
}
fn action_number_s39(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s40(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenId => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenSum => Vec::from(&[Shift(State::TokenSumS64)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS65)]),
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenNotEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenLess => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenLessEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenGreater => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenGreaterEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenIf => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenElse => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenAnd => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenOr => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenRead => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenConvDate => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        _ => vec![],
    }
}
fn action_term_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenId => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenSum => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenMul => Vec::from(&[Shift(State::TokenMulS66)]),
        TK::TokenSub => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenDiv => Vec::from(&[Shift(State::TokenDivS67)]),
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenCBClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenWhile => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenNotEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenLess => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenLessEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenGreater => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenGreaterEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenIf => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenElse => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenRead => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenWrite => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenConvDate => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        _ => vec![],
    }
}
fn action_factor_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS68)]),
        _ => vec![],
    }
}
fn action_tokenid_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenColon => Vec::from(&[Shift(State::TokenColonS69)]),
        TK::TokenComma => Vec::from(&[Shift(State::TokenCommaS70)]),
        _ => vec![],
    }
}
fn action_vardeclarations_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS71)]),
        _ => vec![],
    }
}
fn action_vardeclaration_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS44)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::VarDeclarationsVarDeclarationsSingle, 1usize)])
        }
        _ => vec![],
    }
}
fn action_expressions_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BodyBodyInitExpressions, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyInitExpressions, 3usize)]),
        _ => vec![],
    }
}
fn action_tokentrue_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::BooleanExpressionBooleanExpressionTrue, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenfalse_s49(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::BooleanExpressionBooleanExpressionFalse, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokennot_s50(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS34)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        TK::TokenTrue => Vec::from(&[Shift(State::TokenTrueS48)]),
        TK::TokenFalse => Vec::from(&[Shift(State::TokenFalseS49)]),
        TK::TokenNot => Vec::from(&[Shift(State::TokenNotS50)]),
        TK::TokenIsZero => Vec::from(&[Shift(State::TokenIsZeroS51)]),
        _ => vec![],
    }
}
fn action_tokeniszero_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS74)]),
        _ => vec![],
    }
}
fn action_functioniszero_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::BooleanExpressionBooleanExpressionIsZero, 1usize)])
        }
        _ => vec![],
    }
}
fn action_booleanexpression_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS75)]),
        _ => vec![],
    }
}
fn action_simpleexpression_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        TK::TokenEqual => Vec::from(&[Shift(State::TokenEqualS76)]),
        TK::TokenNotEqual => Vec::from(&[Shift(State::TokenNotEqualS77)]),
        TK::TokenLess => Vec::from(&[Shift(State::TokenLessS78)]),
        TK::TokenLessEqual => Vec::from(&[Shift(State::TokenLessEqualS79)]),
        TK::TokenGreater => Vec::from(&[Shift(State::TokenGreaterS80)]),
        TK::TokenGreaterEqual => Vec::from(&[Shift(State::TokenGreaterEqualS81)]),
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        _ => vec![],
    }
}
fn action_notstatement_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionBooleanExpressionNotStatement, 1usize)],
            )
        }
        _ => vec![],
    }
}
fn action_booleanexpression_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS84)]),
        _ => vec![],
    }
}
fn action_body_s57(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS85)]),
        _ => vec![],
    }
}
fn action_tokenid_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS86)]),
        _ => vec![],
    }
}
fn action_simpleexpression_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS87)]),
        _ => vec![],
    }
}
fn action_tokendate_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS88)]),
        _ => vec![],
    }
}
fn action_tokenintliteral_s61(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenGreaterEqual => {
            Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        _ => vec![],
    }
}
fn action_tokenfloatliteral_s62(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenGreaterEqual => {
            Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s63(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenSum => Vec::from(&[Shift(State::TokenSumS64)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS65)]),
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS89)]),
        _ => vec![],
    }
}
fn action_tokensum_s64(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_tokensub_s65(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_tokenmul_s66(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_tokendiv_s67(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_tokencbopen_s68(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS30)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        TK::TokenConvDate => Vec::from(&[Shift(State::TokenConvDateS8)]),
        _ => vec![],
    }
}
fn action_tokencolon_s69(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenInt => Vec::from(&[Shift(State::TokenIntS95)]),
        TK::TokenFloat => Vec::from(&[Shift(State::TokenFloatS96)]),
        TK::TokenString => Vec::from(&[Shift(State::TokenStringS97)]),
        _ => vec![],
    }
}
fn action_tokencomma_s70(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS44)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s71(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        _ => vec![],
    }
}
fn action_vardeclarations_s72(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::VarDeclarationsVarDeclarationsRecursive, 2usize)])
        }
        _ => vec![],
    }
}
fn action_booleanexpression_s73(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Reduce(PK::NotStatementNot, 2usize)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s74(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s75(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS101)]),
        _ => vec![],
    }
}
fn action_tokenequal_s76(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)]),
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokennotequal_s77(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)]),
        TK::TokenSub => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenless_s78(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)]),
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenlessequal_s79(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenId => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenSub => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokengreater_s80(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)]),
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokengreaterequal_s81(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenId => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenSub => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        _ => vec![],
    }
}
fn action_booleanexpressionchain_s82(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionBooleanExpressionSimpleExpression, 2usize)],
            )
        }
        TK::TokenAnd => Vec::from(&[Shift(State::TokenAndS102)]),
        TK::TokenOr => Vec::from(&[Shift(State::TokenOrS103)]),
        _ => vec![],
    }
}
fn action_comparisonop_s83(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS34)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s84(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS106)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s85(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s86(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)])
        }
        TK::TokenWhile => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenConvDate => {
            Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)])
        }
        _ => vec![],
    }
}
fn action_tokenparclose_s87(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)])
        }
        TK::TokenConvDate => {
            Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)])
        }
        _ => vec![],
    }
}
fn action_tokenparclose_s88(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenId => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenCBClose => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenWhile => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenIf => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenElse => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenRead => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenWrite => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenConvDate => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        _ => vec![],
    }
}
fn action_tokenparclose_s89(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        _ => vec![],
    }
}
fn action_term_s90(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenId => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenSum => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenMul => Vec::from(&[Shift(State::TokenMulS66)]),
        TK::TokenSub => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenDiv => Vec::from(&[Shift(State::TokenDivS67)]),
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenCBClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenWhile => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenNotEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenLess => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenLessEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenGreater => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenGreaterEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenIf => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenElse => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenRead => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenWrite => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        TK::TokenConvDate => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_term_s91(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenId => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenSum => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenMul => Vec::from(&[Shift(State::TokenMulS66)]),
        TK::TokenSub => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenDiv => Vec::from(&[Shift(State::TokenDivS67)]),
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenCBClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenWhile => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenNotEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenLess => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenLessEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenGreater => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenGreaterEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenIf => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenElse => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenRead => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenWrite => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        TK::TokenConvDate => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_factor_s92(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::TermTermMulFactor, 3usize)]),
        _ => vec![],
    }
}
fn action_factor_s93(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::TermTermDivFactor, 3usize)]),
        _ => vec![],
    }
}
fn action_body_s94(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS107)]),
        _ => vec![],
    }
}
fn action_tokenint_s95(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Reduce(PK::DataTypeIntType, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::DataTypeIntType, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenfloat_s96(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Reduce(PK::DataTypeFloatType, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::DataTypeFloatType, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenstring_s97(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Reduce(PK::DataTypeStringType, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::DataTypeStringType, 1usize)]),
        _ => vec![],
    }
}
fn action_datatype_s98(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => {
            Vec::from(&[Reduce(PK::VarDeclarationVarDeclarationSingle, 3usize)])
        }
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::VarDeclarationVarDeclarationSingle, 3usize)])
        }
        _ => vec![],
    }
}
fn action_vardeclaration_s99(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => {
            Vec::from(&[Reduce(PK::VarDeclarationVarDeclarationRecursive, 3usize)])
        }
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::VarDeclarationVarDeclarationRecursive, 3usize)])
        }
        _ => vec![],
    }
}
fn action_arithmeticexpression_s100(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenSum => Vec::from(&[Shift(State::TokenSumS64)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS65)]),
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS108)]),
        _ => vec![],
    }
}
fn action_tokencbopen_s101(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS30)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        TK::TokenConvDate => Vec::from(&[Shift(State::TokenConvDateS8)]),
        _ => vec![],
    }
}
fn action_tokenand_s102(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenParOpen => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenTrue => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenFalse => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenNot => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenIsZero => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenor_s103(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenParOpen => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenTrue => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenFalse => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenNot => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenIsZero => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        _ => vec![],
    }
}
fn action_conjunction_s104(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS32)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS33)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS34)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS35)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS36)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS37)]),
        TK::TokenTrue => Vec::from(&[Shift(State::TokenTrueS48)]),
        TK::TokenFalse => Vec::from(&[Shift(State::TokenFalseS49)]),
        TK::TokenNot => Vec::from(&[Shift(State::TokenNotS50)]),
        TK::TokenIsZero => Vec::from(&[Shift(State::TokenIsZeroS51)]),
        _ => vec![],
    }
}
fn action_simpleexpression_s105(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        TK::TokenEqual => Vec::from(&[Shift(State::TokenEqualS76)]),
        TK::TokenNotEqual => Vec::from(&[Shift(State::TokenNotEqualS77)]),
        TK::TokenLess => Vec::from(&[Shift(State::TokenLessS78)]),
        TK::TokenLessEqual => Vec::from(&[Shift(State::TokenLessEqualS79)]),
        TK::TokenGreater => Vec::from(&[Shift(State::TokenGreaterS80)]),
        TK::TokenGreaterEqual => Vec::from(&[Shift(State::TokenGreaterEqualS81)]),
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        _ => vec![],
    }
}
fn action_tokencbopen_s106(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS30)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        TK::TokenConvDate => Vec::from(&[Shift(State::TokenConvDateS8)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s107(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ProgramProgramWithMain, 6usize)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s108(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::FunctionIsZeroFunctionIsZeroCall, 4usize)])
        }
        _ => vec![],
    }
}
fn action_body_s109(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS113)]),
        _ => vec![],
    }
}
fn action_booleanexpression_s110(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[
                    Reduce(
                        PK::BooleanExpressionBooleanExpressionSimpleExpressionRecursive,
                        4usize,
                    ),
                ],
            )
        }
        _ => vec![],
    }
}
fn action_booleanexpressionchain_s111(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainAux, 3usize)],
            )
        }
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainAux, 3usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainAux, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_body_s112(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS114)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s113(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s114(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenConvDate => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Program => State::ProgramS9,
        NonTermKind::Body => State::BodyS10,
        NonTermKind::FunctionRead => State::FunctionReadS11,
        NonTermKind::FunctionWrite => State::FunctionWriteS12,
        NonTermKind::FunctionConvDate => State::FunctionConvDateS13,
        NonTermKind::Expressions => State::ExpressionsS14,
        NonTermKind::Statement => State::StatementS15,
        NonTermKind::Assignment => State::AssignmentS16,
        NonTermKind::WhileLoop => State::WhileLoopS17,
        NonTermKind::IfStatement => State::IfStatementS18,
        NonTermKind::ElseStatement => State::ElseStatementS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_tokeninit_s2(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::InitBody => State::InitBodyS23,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenInitS2
            )
        }
    }
}
fn goto_statement_s15(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionRead => State::FunctionReadS11,
        NonTermKind::FunctionWrite => State::FunctionWriteS12,
        NonTermKind::FunctionConvDate => State::FunctionConvDateS13,
        NonTermKind::Expressions => State::ExpressionsS31,
        NonTermKind::Statement => State::StatementS15,
        NonTermKind::Assignment => State::AssignmentS16,
        NonTermKind::WhileLoop => State::WhileLoopS17,
        NonTermKind::IfStatement => State::IfStatementS18,
        NonTermKind::ElseStatement => State::ElseStatementS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StatementS15
            )
        }
    }
}
fn goto_tokenassign_s20(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SimpleExpression => State::SimpleExpressionS38,
        NonTermKind::Number => State::NumberS39,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS40,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenAssignS20
            )
        }
    }
}
fn goto_tokencbopen_s22(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::VarDeclarations => State::VarDeclarationsS45,
        NonTermKind::VarDeclaration => State::VarDeclarationS46,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS22
            )
        }
    }
}
fn goto_initbody_s23(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionRead => State::FunctionReadS11,
        NonTermKind::FunctionWrite => State::FunctionWriteS12,
        NonTermKind::FunctionConvDate => State::FunctionConvDateS13,
        NonTermKind::Expressions => State::ExpressionsS47,
        NonTermKind::Statement => State::StatementS15,
        NonTermKind::Assignment => State::AssignmentS16,
        NonTermKind::WhileLoop => State::WhileLoopS17,
        NonTermKind::IfStatement => State::IfStatementS18,
        NonTermKind::ElseStatement => State::ElseStatementS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::InitBodyS23
            )
        }
    }
}
fn goto_tokenparopen_s24(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionIsZero => State::FunctionIsZeroS52,
        NonTermKind::BooleanExpression => State::BooleanExpressionS53,
        NonTermKind::SimpleExpression => State::SimpleExpressionS54,
        NonTermKind::Number => State::NumberS39,
        NonTermKind::NotStatement => State::NotStatementS55,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS40,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS24
            )
        }
    }
}
fn goto_tokenparopen_s25(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionIsZero => State::FunctionIsZeroS52,
        NonTermKind::BooleanExpression => State::BooleanExpressionS56,
        NonTermKind::SimpleExpression => State::SimpleExpressionS54,
        NonTermKind::Number => State::NumberS39,
        NonTermKind::NotStatement => State::NotStatementS55,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS40,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS25
            )
        }
    }
}
fn goto_tokencbopen_s26(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Body => State::BodyS57,
        NonTermKind::FunctionRead => State::FunctionReadS11,
        NonTermKind::FunctionWrite => State::FunctionWriteS12,
        NonTermKind::FunctionConvDate => State::FunctionConvDateS13,
        NonTermKind::Expressions => State::ExpressionsS14,
        NonTermKind::Statement => State::StatementS15,
        NonTermKind::Assignment => State::AssignmentS16,
        NonTermKind::WhileLoop => State::WhileLoopS17,
        NonTermKind::IfStatement => State::IfStatementS18,
        NonTermKind::ElseStatement => State::ElseStatementS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS26
            )
        }
    }
}
fn goto_tokenparopen_s28(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SimpleExpression => State::SimpleExpressionS59,
        NonTermKind::Number => State::NumberS39,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS40,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS28
            )
        }
    }
}
fn goto_tokenparopen_s37(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS39,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS63,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS37
            )
        }
    }
}
fn goto_vardeclaration_s46(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::VarDeclarations => State::VarDeclarationsS72,
        NonTermKind::VarDeclaration => State::VarDeclarationS46,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::VarDeclarationS46
            )
        }
    }
}
fn goto_tokennot_s50(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionIsZero => State::FunctionIsZeroS52,
        NonTermKind::BooleanExpression => State::BooleanExpressionS73,
        NonTermKind::SimpleExpression => State::SimpleExpressionS54,
        NonTermKind::Number => State::NumberS39,
        NonTermKind::NotStatement => State::NotStatementS55,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS40,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenNotS50
            )
        }
    }
}
fn goto_simpleexpression_s54(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BooleanExpressionChain => State::BooleanExpressionChainS82,
        NonTermKind::ComparisonOp => State::ComparisonOpS83,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SimpleExpressionS54
            )
        }
    }
}
fn goto_tokensum_s64(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS39,
        NonTermKind::Term => State::TermS90,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenSumS64
            )
        }
    }
}
fn goto_tokensub_s65(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS39,
        NonTermKind::Term => State::TermS91,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenSubS65
            )
        }
    }
}
fn goto_tokenmul_s66(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS39,
        NonTermKind::Factor => State::FactorS92,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenMulS66
            )
        }
    }
}
fn goto_tokendiv_s67(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS39,
        NonTermKind::Factor => State::FactorS93,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenDivS67
            )
        }
    }
}
fn goto_tokencbopen_s68(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Body => State::BodyS94,
        NonTermKind::FunctionRead => State::FunctionReadS11,
        NonTermKind::FunctionWrite => State::FunctionWriteS12,
        NonTermKind::FunctionConvDate => State::FunctionConvDateS13,
        NonTermKind::Expressions => State::ExpressionsS14,
        NonTermKind::Statement => State::StatementS15,
        NonTermKind::Assignment => State::AssignmentS16,
        NonTermKind::WhileLoop => State::WhileLoopS17,
        NonTermKind::IfStatement => State::IfStatementS18,
        NonTermKind::ElseStatement => State::ElseStatementS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS68
            )
        }
    }
}
fn goto_tokencolon_s69(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DataType => State::DataTypeS98,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenColonS69
            )
        }
    }
}
fn goto_tokencomma_s70(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::VarDeclaration => State::VarDeclarationS99,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCommaS70
            )
        }
    }
}
fn goto_tokenparopen_s74(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS39,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS100,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS74
            )
        }
    }
}
fn goto_booleanexpressionchain_s82(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Conjunction => State::ConjunctionS104,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BooleanExpressionChainS82
            )
        }
    }
}
fn goto_comparisonop_s83(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SimpleExpression => State::SimpleExpressionS105,
        NonTermKind::Number => State::NumberS39,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS40,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ComparisonOpS83
            )
        }
    }
}
fn goto_tokencbopen_s101(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Body => State::BodyS109,
        NonTermKind::FunctionRead => State::FunctionReadS11,
        NonTermKind::FunctionWrite => State::FunctionWriteS12,
        NonTermKind::FunctionConvDate => State::FunctionConvDateS13,
        NonTermKind::Expressions => State::ExpressionsS14,
        NonTermKind::Statement => State::StatementS15,
        NonTermKind::Assignment => State::AssignmentS16,
        NonTermKind::WhileLoop => State::WhileLoopS17,
        NonTermKind::IfStatement => State::IfStatementS18,
        NonTermKind::ElseStatement => State::ElseStatementS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS101
            )
        }
    }
}
fn goto_conjunction_s104(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionIsZero => State::FunctionIsZeroS52,
        NonTermKind::BooleanExpression => State::BooleanExpressionS110,
        NonTermKind::SimpleExpression => State::SimpleExpressionS54,
        NonTermKind::Number => State::NumberS39,
        NonTermKind::NotStatement => State::NotStatementS55,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS40,
        NonTermKind::Term => State::TermS41,
        NonTermKind::Factor => State::FactorS42,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ConjunctionS104
            )
        }
    }
}
fn goto_simpleexpression_s105(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BooleanExpressionChain => State::BooleanExpressionChainS111,
        NonTermKind::ComparisonOp => State::ComparisonOpS83,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SimpleExpressionS105
            )
        }
    }
}
fn goto_tokencbopen_s106(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Body => State::BodyS112,
        NonTermKind::FunctionRead => State::FunctionReadS11,
        NonTermKind::FunctionWrite => State::FunctionWriteS12,
        NonTermKind::FunctionConvDate => State::FunctionConvDateS13,
        NonTermKind::Expressions => State::ExpressionsS14,
        NonTermKind::Statement => State::StatementS15,
        NonTermKind::Assignment => State::AssignmentS16,
        NonTermKind::WhileLoop => State::WhileLoopS17,
        NonTermKind::IfStatement => State::IfStatementS18,
        NonTermKind::ElseStatement => State::ElseStatementS19,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS106
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: GrammarParserDefinition = GrammarParserDefinition {
    actions: [
        action_aug_s0,
        action_tokenid_s1,
        action_tokeninit_s2,
        action_tokenwhile_s3,
        action_tokenif_s4,
        action_tokenelse_s5,
        action_tokenread_s6,
        action_tokenwrite_s7,
        action_tokenconvdate_s8,
        action_program_s9,
        action_body_s10,
        action_functionread_s11,
        action_functionwrite_s12,
        action_functionconvdate_s13,
        action_expressions_s14,
        action_statement_s15,
        action_assignment_s16,
        action_whileloop_s17,
        action_ifstatement_s18,
        action_elsestatement_s19,
        action_tokenassign_s20,
        action_tokenparopen_s21,
        action_tokencbopen_s22,
        action_initbody_s23,
        action_tokenparopen_s24,
        action_tokenparopen_s25,
        action_tokencbopen_s26,
        action_tokenparopen_s27,
        action_tokenparopen_s28,
        action_tokenparopen_s29,
        action_tokenid_s30,
        action_expressions_s31,
        action_tokenintliteral_s32,
        action_tokenfloatliteral_s33,
        action_tokenstringliteral_s34,
        action_tokenid_s35,
        action_tokensub_s36,
        action_tokenparopen_s37,
        action_simpleexpression_s38,
        action_number_s39,
        action_arithmeticexpression_s40,
        action_term_s41,
        action_factor_s42,
        action_tokenparclose_s43,
        action_tokenid_s44,
        action_vardeclarations_s45,
        action_vardeclaration_s46,
        action_expressions_s47,
        action_tokentrue_s48,
        action_tokenfalse_s49,
        action_tokennot_s50,
        action_tokeniszero_s51,
        action_functioniszero_s52,
        action_booleanexpression_s53,
        action_simpleexpression_s54,
        action_notstatement_s55,
        action_booleanexpression_s56,
        action_body_s57,
        action_tokenid_s58,
        action_simpleexpression_s59,
        action_tokendate_s60,
        action_tokenintliteral_s61,
        action_tokenfloatliteral_s62,
        action_arithmeticexpression_s63,
        action_tokensum_s64,
        action_tokensub_s65,
        action_tokenmul_s66,
        action_tokendiv_s67,
        action_tokencbopen_s68,
        action_tokencolon_s69,
        action_tokencomma_s70,
        action_tokencbclose_s71,
        action_vardeclarations_s72,
        action_booleanexpression_s73,
        action_tokenparopen_s74,
        action_tokenparclose_s75,
        action_tokenequal_s76,
        action_tokennotequal_s77,
        action_tokenless_s78,
        action_tokenlessequal_s79,
        action_tokengreater_s80,
        action_tokengreaterequal_s81,
        action_booleanexpressionchain_s82,
        action_comparisonop_s83,
        action_tokenparclose_s84,
        action_tokencbclose_s85,
        action_tokenparclose_s86,
        action_tokenparclose_s87,
        action_tokenparclose_s88,
        action_tokenparclose_s89,
        action_term_s90,
        action_term_s91,
        action_factor_s92,
        action_factor_s93,
        action_body_s94,
        action_tokenint_s95,
        action_tokenfloat_s96,
        action_tokenstring_s97,
        action_datatype_s98,
        action_vardeclaration_s99,
        action_arithmeticexpression_s100,
        action_tokencbopen_s101,
        action_tokenand_s102,
        action_tokenor_s103,
        action_conjunction_s104,
        action_simpleexpression_s105,
        action_tokencbopen_s106,
        action_tokencbclose_s107,
        action_tokenparclose_s108,
        action_body_s109,
        action_booleanexpression_s110,
        action_booleanexpressionchain_s111,
        action_body_s112,
        action_tokencbclose_s113,
        action_tokencbclose_s114,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_tokeninit_s2,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_statement_s15,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokenassign_s20,
        goto_invalid,
        goto_tokencbopen_s22,
        goto_initbody_s23,
        goto_tokenparopen_s24,
        goto_tokenparopen_s25,
        goto_tokencbopen_s26,
        goto_invalid,
        goto_tokenparopen_s28,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokenparopen_s37,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_vardeclaration_s46,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokennot_s50,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_simpleexpression_s54,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokensum_s64,
        goto_tokensub_s65,
        goto_tokenmul_s66,
        goto_tokendiv_s67,
        goto_tokencbopen_s68,
        goto_tokencolon_s69,
        goto_tokencomma_s70,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokenparopen_s74,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_booleanexpressionchain_s82,
        goto_comparisonop_s83,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokencbopen_s101,
        goto_invalid,
        goto_invalid,
        goto_conjunction_s104,
        goto_simpleexpression_s105,
        goto_tokencbopen_s106,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenAssign, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenAssign, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenColon, false)),
            Some((TK::TokenComma, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::TokenSum, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenInt, false)),
            Some((TK::TokenFloat, false)),
            Some((TK::TokenString, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenSum, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for GrammarParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct GrammarParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        GrammarParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<'i, L> GrammarParser<'i, Input, L, DefaultBuilder>
where
    L: Lexer<'i, Context<'i, Input>, State, TokenKind, Input = Input>,
{
    pub fn new(lexer: L) -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                false,
                lexer,
                DefaultBuilder::new(),
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for GrammarParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
pub struct DefaultBuilder {
    res_stack: Vec<Symbol>,
}
impl DefaultBuilder {
    #[allow(dead_code)]
    pub fn new() -> Self {
        Self { res_stack: vec![] }
    }
}
impl Builder for DefaultBuilder {
    type Output = grammar_actions::Program;
    fn get_result(&mut self) -> Self::Output {
        match self.res_stack.pop().unwrap() {
            Symbol::NonTerminal(NonTerminal::Program(r)) => r,
            _ => panic!("Invalid result on the parse stack!"),
        }
    }
}
impl<'i> LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>
for DefaultBuilder {
    #![allow(unused_variables)]
    fn shift_action(
        &mut self,
        context: &Context<'i, Input>,
        token: Token<'i, Input, TokenKind>,
    ) {
        let val = match token.kind {
            TokenKind::STOP => panic!("Cannot shift STOP token!"),
            TokenKind::TokenInt => {
                Terminal::TokenInt(grammar_actions::token_int(context, token))
            }
            TokenKind::TokenFloat => {
                Terminal::TokenFloat(grammar_actions::token_float(context, token))
            }
            TokenKind::TokenString => {
                Terminal::TokenString(grammar_actions::token_string(context, token))
            }
            TokenKind::TokenIntLiteral => {
                Terminal::TokenIntLiteral(
                    grammar_actions::token_int_literal(context, token),
                )
            }
            TokenKind::TokenFloatLiteral => {
                Terminal::TokenFloatLiteral(
                    grammar_actions::token_float_literal(context, token),
                )
            }
            TokenKind::TokenStringLiteral => {
                Terminal::TokenStringLiteral(
                    grammar_actions::token_string_literal(context, token),
                )
            }
            TokenKind::TokenId => {
                Terminal::TokenId(grammar_actions::token_id(context, token))
            }
            TokenKind::TokenAssign => {
                Terminal::TokenAssign(grammar_actions::token_assign(context, token))
            }
            TokenKind::TokenSum => {
                Terminal::TokenSum(grammar_actions::token_sum(context, token))
            }
            TokenKind::TokenMul => {
                Terminal::TokenMul(grammar_actions::token_mul(context, token))
            }
            TokenKind::TokenSub => {
                Terminal::TokenSub(grammar_actions::token_sub(context, token))
            }
            TokenKind::TokenDiv => {
                Terminal::TokenDiv(grammar_actions::token_div(context, token))
            }
            TokenKind::TokenParOpen => {
                Terminal::TokenParOpen(grammar_actions::token_par_open(context, token))
            }
            TokenKind::TokenParClose => {
                Terminal::TokenParClose(grammar_actions::token_par_close(context, token))
            }
            TokenKind::TokenCBOpen => {
                Terminal::TokenCBOpen(grammar_actions::token_cbopen(context, token))
            }
            TokenKind::TokenCBClose => {
                Terminal::TokenCBClose(grammar_actions::token_cbclose(context, token))
            }
            TokenKind::TokenColon => {
                Terminal::TokenColon(grammar_actions::token_colon(context, token))
            }
            TokenKind::TokenInit => {
                Terminal::TokenInit(grammar_actions::token_init(context, token))
            }
            TokenKind::TokenWhile => {
                Terminal::TokenWhile(grammar_actions::token_while(context, token))
            }
            TokenKind::TokenEqual => {
                Terminal::TokenEqual(grammar_actions::token_equal(context, token))
            }
            TokenKind::TokenNotEqual => {
                Terminal::TokenNotEqual(grammar_actions::token_not_equal(context, token))
            }
            TokenKind::TokenLess => {
                Terminal::TokenLess(grammar_actions::token_less(context, token))
            }
            TokenKind::TokenLessEqual => {
                Terminal::TokenLessEqual(
                    grammar_actions::token_less_equal(context, token),
                )
            }
            TokenKind::TokenGreater => {
                Terminal::TokenGreater(grammar_actions::token_greater(context, token))
            }
            TokenKind::TokenGreaterEqual => {
                Terminal::TokenGreaterEqual(
                    grammar_actions::token_greater_equal(context, token),
                )
            }
            TokenKind::TokenTrue => {
                Terminal::TokenTrue(grammar_actions::token_true(context, token))
            }
            TokenKind::TokenFalse => {
                Terminal::TokenFalse(grammar_actions::token_false(context, token))
            }
            TokenKind::TokenIf => {
                Terminal::TokenIf(grammar_actions::token_if(context, token))
            }
            TokenKind::TokenElse => {
                Terminal::TokenElse(grammar_actions::token_else(context, token))
            }
            TokenKind::TokenComma => {
                Terminal::TokenComma(grammar_actions::token_comma(context, token))
            }
            TokenKind::TokenAnd => {
                Terminal::TokenAnd(grammar_actions::token_and(context, token))
            }
            TokenKind::TokenOr => {
                Terminal::TokenOr(grammar_actions::token_or(context, token))
            }
            TokenKind::TokenNot => {
                Terminal::TokenNot(grammar_actions::token_not(context, token))
            }
            TokenKind::TokenRead => {
                Terminal::TokenRead(grammar_actions::token_read(context, token))
            }
            TokenKind::TokenWrite => {
                Terminal::TokenWrite(grammar_actions::token_write(context, token))
            }
            TokenKind::TokenIsZero => {
                Terminal::TokenIsZero(grammar_actions::token_is_zero(context, token))
            }
            TokenKind::TokenConvDate => {
                Terminal::TokenConvDate(grammar_actions::token_conv_date(context, token))
            }
            TokenKind::TokenDate => {
                Terminal::TokenDate(grammar_actions::token_date(context, token))
            }
            _ => panic!("Shift of unreachable terminal!"),
        };
        self.res_stack.push(Symbol::Terminal(val));
    }
    fn reduce_action(
        &mut self,
        context: &Context<'i, Input>,
        prod: ProdKind,
        prod_len: usize,
    ) {
        let prod = match prod {
            ProdKind::ProgramProgramWithMain => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 6usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::TokenId(p0)),
                        Symbol::Terminal(Terminal::TokenParOpen(p1)),
                        Symbol::Terminal(Terminal::TokenParClose(p2)),
                        Symbol::Terminal(Terminal::TokenCBOpen(p3)),
                        Symbol::NonTerminal(NonTerminal::Body(p4)),
                        Symbol::Terminal(Terminal::TokenCBClose(p5)),
                    ) => {
                        NonTerminal::Program(
                            grammar_actions::program_program_with_main(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                                p4,
                                p5,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ProgramProgramOnlyBody => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Body(p0)) => {
                        NonTerminal::Program(
                            grammar_actions::program_program_only_body(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BodyBodyInitExpressions => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenInit(p0)),
                        Symbol::NonTerminal(NonTerminal::InitBody(p1)),
                        Symbol::NonTerminal(NonTerminal::Expressions(p2)),
                    ) => {
                        NonTerminal::Body(
                            grammar_actions::body_body_init_expressions(
                                context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BodyBodyInit => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenInit(p0)),
                        Symbol::NonTerminal(NonTerminal::InitBody(p1)),
                    ) => {
                        NonTerminal::Body(
                            grammar_actions::body_body_init(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BodyBodyExpressions => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Expressions(p0)) => {
                        NonTerminal::Body(
                            grammar_actions::body_body_expressions(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BodyBodyEmpty => {
                NonTerminal::Body(grammar_actions::body_body_empty(context))
            }
            ProdKind::InitBodyInitBody => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenCBOpen(p0)),
                        Symbol::NonTerminal(NonTerminal::VarDeclarations(p1)),
                        Symbol::Terminal(Terminal::TokenCBClose(p2)),
                    ) => {
                        NonTerminal::InitBody(
                            grammar_actions::init_body_init_body(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FunctionReadFunctionReadCall => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::TokenRead(p0)),
                        Symbol::Terminal(Terminal::TokenParOpen(p1)),
                        Symbol::Terminal(Terminal::TokenId(p2)),
                        Symbol::Terminal(Terminal::TokenParClose(p3)),
                    ) => {
                        NonTerminal::FunctionRead(
                            grammar_actions::function_read_function_read_call(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FunctionWriteFunctionWriteCall => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::TokenWrite(p0)),
                        Symbol::Terminal(Terminal::TokenParOpen(p1)),
                        Symbol::NonTerminal(NonTerminal::SimpleExpression(p2)),
                        Symbol::Terminal(Terminal::TokenParClose(p3)),
                    ) => {
                        NonTerminal::FunctionWrite(
                            grammar_actions::function_write_function_write_call(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FunctionIsZeroFunctionIsZeroCall => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::TokenIsZero(p0)),
                        Symbol::Terminal(Terminal::TokenParOpen(p1)),
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p2)),
                        Symbol::Terminal(Terminal::TokenParClose(p3)),
                    ) => {
                        NonTerminal::FunctionIsZero(
                            grammar_actions::function_is_zero_function_is_zero_call(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FunctionConvDateFunctionConvDateVariableCall => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::TokenConvDate(p0)),
                        Symbol::Terminal(Terminal::TokenParOpen(p1)),
                        Symbol::Terminal(Terminal::TokenDate(p2)),
                        Symbol::Terminal(Terminal::TokenParClose(p3)),
                    ) => {
                        NonTerminal::FunctionConvDate(
                            grammar_actions::function_conv_date_function_conv_date_variable_call(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::VarDeclarationsVarDeclarationsSingle => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::VarDeclaration(p0)) => {
                        NonTerminal::VarDeclarations(
                            grammar_actions::var_declarations_var_declarations_single(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::VarDeclarationsVarDeclarationsRecursive => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::VarDeclaration(p0)),
                        Symbol::NonTerminal(NonTerminal::VarDeclarations(p1)),
                    ) => {
                        NonTerminal::VarDeclarations(
                            grammar_actions::var_declarations_var_declarations_recursive(
                                context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::VarDeclarationVarDeclarationSingle => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenId(p0)),
                        Symbol::Terminal(Terminal::TokenColon(p1)),
                        Symbol::NonTerminal(NonTerminal::DataType(p2)),
                    ) => {
                        NonTerminal::VarDeclaration(
                            grammar_actions::var_declaration_var_declaration_single(
                                context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::VarDeclarationVarDeclarationRecursive => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenId(p0)),
                        Symbol::Terminal(Terminal::TokenComma(p1)),
                        Symbol::NonTerminal(NonTerminal::VarDeclaration(p2)),
                    ) => {
                        NonTerminal::VarDeclaration(
                            grammar_actions::var_declaration_var_declaration_recursive(
                                context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionsExpressionSingle => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Statement(p0)) => {
                        NonTerminal::Expressions(
                            grammar_actions::expressions_expression_single(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ExpressionsExpressionRecursive => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Statement(p0)),
                        Symbol::NonTerminal(NonTerminal::Expressions(p1)),
                    ) => {
                        NonTerminal::Expressions(
                            grammar_actions::expressions_expression_recursive(
                                context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementStatementAssignment => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Assignment(p0)) => {
                        NonTerminal::Statement(
                            grammar_actions::statement_statement_assignment(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementStatementIfStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::IfStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_actions::statement_statement_if_statement(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementStatementElseStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ElseStatement(p0)) => {
                        NonTerminal::Statement(
                            grammar_actions::statement_statement_else_statement(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementStatementWhile => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::WhileLoop(p0)) => {
                        NonTerminal::Statement(
                            grammar_actions::statement_statement_while(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementStatementWrite => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::FunctionWrite(p0)) => {
                        NonTerminal::Statement(
                            grammar_actions::statement_statement_write(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementStatementRead => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::FunctionRead(p0)) => {
                        NonTerminal::Statement(
                            grammar_actions::statement_statement_read(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::StatementStatementConvDate => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::FunctionConvDate(p0)) => {
                        NonTerminal::Statement(
                            grammar_actions::statement_statement_conv_date(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::AssignmentAssignment => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenId(p0)),
                        Symbol::Terminal(Terminal::TokenAssign(p1)),
                        Symbol::NonTerminal(NonTerminal::SimpleExpression(p2)),
                    ) => {
                        NonTerminal::Assignment(
                            grammar_actions::assignment_assignment(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DataTypeIntType => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenInt(p0)) => {
                        NonTerminal::DataType(
                            grammar_actions::data_type_int_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DataTypeFloatType => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenFloat(p0)) => {
                        NonTerminal::DataType(
                            grammar_actions::data_type_float_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::DataTypeStringType => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenString(p0)) => {
                        NonTerminal::DataType(
                            grammar_actions::data_type_string_type(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::WhileLoopWhile => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::TokenWhile(p0)),
                        Symbol::Terminal(Terminal::TokenParOpen(p1)),
                        Symbol::NonTerminal(NonTerminal::BooleanExpression(p2)),
                        Symbol::Terminal(Terminal::TokenParClose(p3)),
                        Symbol::Terminal(Terminal::TokenCBOpen(p4)),
                        Symbol::NonTerminal(NonTerminal::Body(p5)),
                        Symbol::Terminal(Terminal::TokenCBClose(p6)),
                    ) => {
                        NonTerminal::WhileLoop(
                            grammar_actions::while_loop_while(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                                p4,
                                p5,
                                p6,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::IfStatementIfStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 7usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::TokenIf(p0)),
                        Symbol::Terminal(Terminal::TokenParOpen(p1)),
                        Symbol::NonTerminal(NonTerminal::BooleanExpression(p2)),
                        Symbol::Terminal(Terminal::TokenParClose(p3)),
                        Symbol::Terminal(Terminal::TokenCBOpen(p4)),
                        Symbol::NonTerminal(NonTerminal::Body(p5)),
                        Symbol::Terminal(Terminal::TokenCBClose(p6)),
                    ) => {
                        NonTerminal::IfStatement(
                            grammar_actions::if_statement_if_statement(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                                p4,
                                p5,
                                p6,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ElseStatementElseStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::Terminal(Terminal::TokenElse(p0)),
                        Symbol::Terminal(Terminal::TokenCBOpen(p1)),
                        Symbol::NonTerminal(NonTerminal::Body(p2)),
                        Symbol::Terminal(Terminal::TokenCBClose(p3)),
                    ) => {
                        NonTerminal::ElseStatement(
                            grammar_actions::else_statement_else_statement(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpression => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::SimpleExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::BooleanExpressionChain(p1)),
                    ) => {
                        NonTerminal::BooleanExpression(
                            grammar_actions::boolean_expression_boolean_expression_simple_expression(
                                context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BooleanExpressionBooleanExpressionTrue => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenTrue(p0)) => {
                        NonTerminal::BooleanExpression(
                            grammar_actions::boolean_expression_boolean_expression_true(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BooleanExpressionBooleanExpressionFalse => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenFalse(p0)) => {
                        NonTerminal::BooleanExpression(
                            grammar_actions::boolean_expression_boolean_expression_false(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpressionRecursive => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 4usize)
                    .into_iter();
                match (
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                    i.next().unwrap(),
                ) {
                    (
                        Symbol::NonTerminal(NonTerminal::SimpleExpression(p0)),
                        Symbol::NonTerminal(NonTerminal::BooleanExpressionChain(p1)),
                        Symbol::NonTerminal(NonTerminal::Conjunction(p2)),
                        Symbol::NonTerminal(NonTerminal::BooleanExpression(p3)),
                    ) => {
                        NonTerminal::BooleanExpression(
                            grammar_actions::boolean_expression_boolean_expression_simple_expression_recursive(
                                context,
                                p0,
                                p1,
                                p2,
                                p3,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BooleanExpressionBooleanExpressionNotStatement => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::NotStatement(p0)) => {
                        NonTerminal::BooleanExpression(
                            grammar_actions::boolean_expression_boolean_expression_not_statement(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BooleanExpressionBooleanExpressionIsZero => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::FunctionIsZero(p0)) => {
                        NonTerminal::BooleanExpression(
                            grammar_actions::boolean_expression_boolean_expression_is_zero(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainAux => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ComparisonOp(p0)),
                        Symbol::NonTerminal(NonTerminal::SimpleExpression(p1)),
                        Symbol::NonTerminal(NonTerminal::BooleanExpressionChain(p2)),
                    ) => {
                        NonTerminal::BooleanExpressionChain(
                            grammar_actions::boolean_expression_chain_boolean_expression_chain_aux(
                                context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainEmpty => {
                NonTerminal::BooleanExpressionChain(
                    grammar_actions::boolean_expression_chain_boolean_expression_chain_empty(
                        context,
                    ),
                )
            }
            ProdKind::SimpleExpressionSimpleExpressionArithmetic => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)) => {
                        NonTerminal::SimpleExpression(
                            grammar_actions::simple_expression_simple_expression_arithmetic(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::SimpleExpressionSimpleExpressionString => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenStringLiteral(p0)) => {
                        NonTerminal::SimpleExpression(
                            grammar_actions::simple_expression_simple_expression_string(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConjunctionConjunctionAnd => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenAnd(p0)) => {
                        NonTerminal::Conjunction(
                            grammar_actions::conjunction_conjunction_and(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ConjunctionConjunctionOr => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenOr(p0)) => {
                        NonTerminal::Conjunction(
                            grammar_actions::conjunction_conjunction_or(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComparisonOpComparisonOpEqual => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenEqual(p0)) => {
                        NonTerminal::ComparisonOp(
                            grammar_actions::comparison_op_comparison_op_equal(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComparisonOpComparisonOpNotEqual => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenNotEqual(p0)) => {
                        NonTerminal::ComparisonOp(
                            grammar_actions::comparison_op_comparison_op_not_equal(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComparisonOpComparisonOpLess => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenLess(p0)) => {
                        NonTerminal::ComparisonOp(
                            grammar_actions::comparison_op_comparison_op_less(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComparisonOpComparisonOpLessEqual => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenLessEqual(p0)) => {
                        NonTerminal::ComparisonOp(
                            grammar_actions::comparison_op_comparison_op_less_equal(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComparisonOpComparisonOpGreater => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenGreater(p0)) => {
                        NonTerminal::ComparisonOp(
                            grammar_actions::comparison_op_comparison_op_greater(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ComparisonOpComparisonOpGreaterEqual => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenGreaterEqual(p0)) => {
                        NonTerminal::ComparisonOp(
                            grammar_actions::comparison_op_comparison_op_greater_equal(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NumberNumberInt => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenIntLiteral(p0)) => {
                        NonTerminal::Number(
                            grammar_actions::number_number_int(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NumberNumberFloat => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenFloatLiteral(p0)) => {
                        NonTerminal::Number(
                            grammar_actions::number_number_float(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NumberNumberNegativeInt => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenSub(p0)),
                        Symbol::Terminal(Terminal::TokenIntLiteral(p1)),
                    ) => {
                        NonTerminal::Number(
                            grammar_actions::number_number_negative_int(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NumberNumberNegativeFloat => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenSub(p0)),
                        Symbol::Terminal(Terminal::TokenFloatLiteral(p1)),
                    ) => {
                        NonTerminal::Number(
                            grammar_actions::number_number_negative_float(
                                context,
                                p0,
                                p1,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::NotStatementNot => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 2usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenNot(p0)),
                        Symbol::NonTerminal(NonTerminal::BooleanExpression(p1)),
                    ) => {
                        NonTerminal::NotStatement(
                            grammar_actions::not_statement_not(context, p0, p1),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionSumTerm => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)),
                        Symbol::Terminal(Terminal::TokenSum(p1)),
                        Symbol::NonTerminal(NonTerminal::Term(p2)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_actions::arithmetic_expression_arithmetic_expression_sum_term(
                                context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionSubTerm => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p0)),
                        Symbol::Terminal(Terminal::TokenSub(p1)),
                        Symbol::NonTerminal(NonTerminal::Term(p2)),
                    ) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_actions::arithmetic_expression_arithmetic_expression_sub_term(
                                context,
                                p0,
                                p1,
                                p2,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionTerm => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Term(p0)) => {
                        NonTerminal::ArithmeticExpression(
                            grammar_actions::arithmetic_expression_arithmetic_expression_term(
                                context,
                                p0,
                            ),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermTermMulFactor => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Term(p0)),
                        Symbol::Terminal(Terminal::TokenMul(p1)),
                        Symbol::NonTerminal(NonTerminal::Factor(p2)),
                    ) => {
                        NonTerminal::Term(
                            grammar_actions::term_term_mul_factor(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermTermDivFactor => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::NonTerminal(NonTerminal::Term(p0)),
                        Symbol::Terminal(Terminal::TokenDiv(p1)),
                        Symbol::NonTerminal(NonTerminal::Factor(p2)),
                    ) => {
                        NonTerminal::Term(
                            grammar_actions::term_term_div_factor(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::TermTermFactor => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Factor(p0)) => {
                        NonTerminal::Term(grammar_actions::term_term_factor(context, p0))
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FactorFactorId => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::Terminal(Terminal::TokenId(p0)) => {
                        NonTerminal::Factor(
                            grammar_actions::factor_factor_id(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FactorFactorNumber => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 1usize)
                    .into_iter();
                match i.next().unwrap() {
                    Symbol::NonTerminal(NonTerminal::Number(p0)) => {
                        NonTerminal::Factor(
                            grammar_actions::factor_factor_number(context, p0),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            ProdKind::FactorFactorParen => {
                let mut i = self
                    .res_stack
                    .split_off(self.res_stack.len() - 3usize)
                    .into_iter();
                match (i.next().unwrap(), i.next().unwrap(), i.next().unwrap()) {
                    (
                        Symbol::Terminal(Terminal::TokenParOpen(p0)),
                        Symbol::NonTerminal(NonTerminal::ArithmeticExpression(p1)),
                        Symbol::Terminal(Terminal::TokenParClose(p2)),
                    ) => {
                        NonTerminal::Factor(
                            grammar_actions::factor_factor_paren(context, p0, p1, p2),
                        )
                    }
                    _ => panic!("Invalid symbol parse stack data."),
                }
            }
            _ => panic!("Reduce of unreachable nonterminal!"),
        };
        self.res_stack.push(Symbol::NonTerminal(prod));
    }
}
