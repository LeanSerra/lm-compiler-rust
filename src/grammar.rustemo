Program: TokenId TokenParOpen TokenParClose TokenCBOpen Body TokenCBClose {Program};

Body: TokenInit InitBody Expressions {BodyInitExpressions}
 | TokenInit InitBody {BodyInit}
 | Expressions {BodyExpressions}
 | EMPTY {BodyEmpty};

InitBody: TokenCBOpen VarDeclarations TokenCBClose {InitBody};

VarDeclarations: VarDeclaration {VarDeclarationsSingle}
 | VarDeclaration VarDeclarations {VarDeclarationsRecursive};

VarDeclaration: TokenId TokenColon Data_Type {VarDeclarationSingle}
 | TokenId TokenComma VarDeclaration {VarDeclarationRecursive};

Expressions: Expression {ExpressionSingle}
 | Expression Expressions {ExpressionRecursive};

Expression: Assignment {ExpressionAssignment};

Assignment: TokenId TokenAssign Literal {Assignment};

Literal: TokenIntLiteral {IntegerLiteral}
 | TokenFloatLiteral {FloatLiteral}
 | TokenStringLiteral {StringLiteral};

Data_Type: TokenInt {IntType}
 | TokenFloat {FloatType}
 | TokenString {StringType};

WhileLoop: TokenWhile TokenParOpen Condition TokenParClose TokenCBOpen Body TokenCBClose {While};

Condition: Expression ComparisonOp Expression {ConditionSingle}
 | TokenTrue {ConditionTrue}
 | TokenFalse {ConditionFalse}
 | Expression ComparisonOp Expression Conjunction Condition {ConditionRecursive};

Conjunction: TokenAnd {ConjunctionAnd}
 | TokenOr {ConjunctionOr};

ComparisonOp: TokenEqual {ComparisonOpEqual}
 | TokenNotEqual {ComparisonOpNotEqual}
 | TokenLess {ComparisonOpLess}
 | TokenLessEqual {ComparisonOpLessEqual}
 | TokenGreater {ComparisonOpGreater}
 | TokenGreaterEqual {ComparisonOpGreaterEqual};

If: TokenIf TokenParOpen Condition TokenParClose TokenCBOpen Body TokenCBClose {If};

Else: TokenElse TokenCBOpen Body TokenCBClose {Else};

ArithmeticOperation: TokenId ArithmeticOperator TokenId {ArithmeticOperationIdId}
 | TokenId ArithmeticOperator Number {ArithmeticOperationIdNumber}
 | Number ArithmeticOperator TokenId {ArithmeticOperationNumberId}
 | Number ArithmeticOperator Number {ArithmeticOperationNumberNumber};

Number: TokenIntLiteral {NumberInt}
 | TokenFloatLiteral {NumberFloat};

ArithmeticOperator: TokenSum {ArithmeticOperatorSum}
 | TokenMul {ArithmeticOperatorMul}
 | TokenSub {ArithmeticOperatorSub}
 | TokenDiv {ArithmeticOperatorDiv};

Not: TokenNot Condition {Not};

terminals

TokenInt:;
TokenFloat:;
TokenString:;
TokenIntLiteral:;
TokenFloatLiteral:;
TokenStringLiteral:;
TokenId:;
TokenAssign:;
TokenSum:;
TokenMul:;
TokenSub:;
TokenDiv:;
TokenParOpen:;
TokenParClose:;
TokenCBOpen:;
TokenCBClose:;
TokenSemicolon:;
TokenColon:;
TokenInit:;
TokenWhile:;
TokenEqual:;
TokenNotEqual:;
TokenLess:;
TokenLessEqual:;
TokenGreater:;
TokenGreaterEqual:;
TokenTrue:;
TokenFalse:;
TokenIf:;
TokenElse:;
TokenComma:;
TokenAnd:;
TokenOr:;
TokenNot:;
