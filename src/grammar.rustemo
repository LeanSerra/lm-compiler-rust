Program: TokenId TokenParOpen TokenParClose TokenCBOpen Body TokenCBClose {Program};

Body: TokenInit InitBody Expressions {BodyInitExpressions}
 | TokenInit InitBody {BodyInit}
 | Expressions {BodyExpressions}
 | EMPTY {BodyEmpty};

InitBody: TokenCBOpen VarDeclarations TokenCBClose {InitBody};

VarDeclarations: VarDeclaration {VarDeclarationsSingle}
 | VarDeclaration VarDeclarations {VarDeclarationsRecursive};

VarDeclaration: TokenId TokenColon Data_Type {VarDeclarationSingle}
 | TokenId TokenComma VarDeclaration {VarDeclarationRecursive};

Expressions: Statement {ExpressionSingle}
 | Statement Expressions {ExpressionRecursive};

Statement: Assignment {StatementAssignment}
 | Si {StatementIfStatement}
 | Sino {StatementElseStatement}
 | WhileLoop {StatementWhile};

Assignment: TokenId TokenAssign SimpleExpression {Assignment};

Literal: TokenIntLiteral {IntegerLiteral}
 | TokenFloatLiteral {FloatLiteral}
 | TokenStringLiteral {StringLiteral};

Data_Type: TokenInt {IntType}
 | TokenFloat {FloatType}
 | TokenString {StringType};

WhileLoop: TokenWhile TokenParOpen BooleanExpression TokenParClose TokenCBOpen Body TokenCBClose {While};

Si: TokenIf TokenParOpen BooleanExpression TokenParClose TokenCBOpen Body TokenCBClose {IfStatement};

Sino: TokenElse TokenCBOpen Body TokenCBClose {ElseStatement};

BooleanExpression: SimpleExpression BooleanExpressionChain {BooleanExpressionSimpleExpression}
 | TokenTrue {BooleanExpressionTrue}
 | TokenFalse {BooleanExpressionFalse}
 | SimpleExpression BooleanExpressionChain Conjunction BooleanExpression {BooleanExpressionSimpleExpressionRecursive}
 | NotStatement {BooleanExpressionNotStatement};

 BooleanExpressionChain: ComparisonOp SimpleExpression BooleanExpressionChain {BooleanExpressionChainAux}
 | EMPTY {BooleanExpressionChainEmpty};

SimpleExpression: ArithmeticOperation {SimpleExpressionArithmetic}
 | TokenId {SimpleExpressionTokenId}
 | Literal {SimpleExpressionLiteral};

Conjunction: TokenAnd {ConjunctionAnd}
 | TokenOr {ConjunctionOr};

ComparisonOp: TokenEqual {ComparisonOpEqual}
 | TokenNotEqual {ComparisonOpNotEqual}
 | TokenLess {ComparisonOpLess}
 | TokenLessEqual {ComparisonOpLessEqual}
 | TokenGreater {ComparisonOpGreater}
 | TokenGreaterEqual {ComparisonOpGreaterEqual};

ArithmeticOperation: TokenId ArithmeticOperator TokenId {ArithmeticOperationIdId}
 | TokenId ArithmeticOperator Number {ArithmeticOperationIdNumber}
 | Number ArithmeticOperator TokenId {ArithmeticOperationNumberId}
 | Number ArithmeticOperator Number {ArithmeticOperationNumberNumber};

Number: TokenIntLiteral {NumberInt}
 | TokenFloatLiteral {NumberFloat};

ArithmeticOperator: TokenSum {ArithmeticOperatorSum}
 | TokenMul {ArithmeticOperatorMul}
 | TokenSub {ArithmeticOperatorSub}
 | TokenDiv {ArithmeticOperatorDiv};

NotStatement: TokenNot BooleanExpression {Not};

terminals

TokenInt:;
TokenFloat:;
TokenString:;
TokenIntLiteral:;
TokenFloatLiteral:;
TokenStringLiteral:;
TokenId:;
TokenAssign:;
TokenSum:;
TokenMul:;
TokenSub:;
TokenDiv:;
TokenParOpen:;
TokenParClose:;
TokenCBOpen:;
TokenCBClose:;
TokenSemicolon:;
TokenColon:;
TokenInit:;
TokenWhile:;
TokenEqual:;
TokenNotEqual:;
TokenLess:;
TokenLessEqual:;
TokenGreater:;
TokenGreaterEqual:;
TokenTrue:;
TokenFalse:;
TokenIf:;
TokenElse:;
TokenComma:;
TokenAnd:;
TokenOr:;
TokenNot:;
