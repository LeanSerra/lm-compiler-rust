/// Generated by rustemo. Do not edit manually!
use std::fmt::Debug;
use std::hash::Hash;
use rustemo::{
    Result, Input as InputT, Lexer, Token, TokenRecognizer as TokenRecognizerT, Parser,
    ParserDefinition, State as StateT, Builder,
};
use rustemo::LRBuilder;
use std::cell::RefCell;
use rustemo::{LRParser, LRContext};
use rustemo::Action::{self, Shift, Reduce, Accept};
#[allow(unused_imports)]
use rustemo::debug::{log, logn};
#[allow(unused_imports)]
#[cfg(debug_assertions)]
use rustemo::colored::*;
pub type Input = str;
const STATE_COUNT: usize = 117usize;
const MAX_RECOGNIZERS: usize = 21usize;
#[allow(dead_code)]
const TERMINAL_COUNT: usize = 39usize;
#[allow(clippy::upper_case_acronyms)]
#[derive(Debug, Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub enum TokenKind {
    #[default]
    STOP,
    TokenInt,
    TokenFloat,
    TokenString,
    TokenIntLiteral,
    TokenFloatLiteral,
    TokenStringLiteral,
    TokenId,
    TokenAssign,
    TokenSum,
    TokenMul,
    TokenSub,
    TokenDiv,
    TokenParOpen,
    TokenParClose,
    TokenCBOpen,
    TokenCBClose,
    TokenColon,
    TokenInit,
    TokenWhile,
    TokenEqual,
    TokenNotEqual,
    TokenLess,
    TokenLessEqual,
    TokenGreater,
    TokenGreaterEqual,
    TokenTrue,
    TokenFalse,
    TokenIf,
    TokenElse,
    TokenComma,
    TokenAnd,
    TokenOr,
    TokenNot,
    TokenRead,
    TokenWrite,
    TokenIsZero,
    TokenConvDate,
    TokenDate,
}
use TokenKind as TK;
impl From<TokenKind> for usize {
    fn from(t: TokenKind) -> Self {
        t as usize
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Clone, Copy, PartialEq)]
pub enum ProdKind {
    ProgramProgramWithMain,
    ProgramProgramOnlyBody,
    BodyBodyInitExpressions,
    BodyBodyInit,
    BodyBodyExpressions,
    BodyBodyEmpty,
    InitBodyInitBody,
    FunctionReadFunctionReadCall,
    FunctionWriteFunctionWriteCall,
    FunctionIsZeroFunctionIsZeroCall,
    FunctionConvDateFunctionConvDateVariableCall,
    VarDeclarationsVarDeclarationsSingle,
    VarDeclarationsVarDeclarationsRecursive,
    VarDeclarationVarDeclarationSingle,
    VarDeclarationVarDeclarationRecursive,
    ExpressionsExpressionSingle,
    ExpressionsExpressionRecursive,
    StatementStatementAssignment,
    StatementStatementIfStatement,
    StatementStatementElseStatement,
    StatementStatementWhile,
    StatementStatementWrite,
    StatementStatementRead,
    AssignmentAssignmentExpression,
    AssignmentAssignmentConvDate,
    DataTypeIntType,
    DataTypeFloatType,
    DataTypeStringType,
    WhileLoopWhile,
    IfStatementIfStatement,
    ElseStatementElseStatement,
    BooleanExpressionBooleanExpressionSimpleExpression,
    BooleanExpressionBooleanExpressionTrue,
    BooleanExpressionBooleanExpressionFalse,
    BooleanExpressionBooleanExpressionSimpleExpressionRecursive,
    BooleanExpressionBooleanExpressionNotStatement,
    BooleanExpressionBooleanExpressionIsZero,
    BooleanExpressionChainBooleanExpressionChainAux,
    BooleanExpressionChainBooleanExpressionChainEmpty,
    SimpleExpressionSimpleExpressionArithmetic,
    SimpleExpressionSimpleExpressionString,
    ConjunctionConjunctionAnd,
    ConjunctionConjunctionOr,
    ComparisonOpComparisonOpEqual,
    ComparisonOpComparisonOpNotEqual,
    ComparisonOpComparisonOpLess,
    ComparisonOpComparisonOpLessEqual,
    ComparisonOpComparisonOpGreater,
    ComparisonOpComparisonOpGreaterEqual,
    NumberNumberInt,
    NumberNumberFloat,
    NumberNumberNegativeInt,
    NumberNumberNegativeFloat,
    NotStatementNot,
    ArithmeticExpressionArithmeticExpressionSumTerm,
    ArithmeticExpressionArithmeticExpressionSubTerm,
    ArithmeticExpressionArithmeticExpressionTerm,
    DummyAEP1,
    TermTermMulFactor,
    TermTermDivFactor,
    TermTermFactor,
    DummyTP1,
    FactorFactorId,
    FactorFactorNumber,
    FactorFactorParen,
}
use ProdKind as PK;
impl std::fmt::Debug for ProdKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            ProdKind::ProgramProgramWithMain => {
                "Program: TokenId TokenParOpen TokenParClose TokenCBOpen Body TokenCBClose"
            }
            ProdKind::ProgramProgramOnlyBody => "Program: Body",
            ProdKind::BodyBodyInitExpressions => "Body: TokenInit InitBody Expressions",
            ProdKind::BodyBodyInit => "Body: TokenInit InitBody",
            ProdKind::BodyBodyExpressions => "Body: Expressions",
            ProdKind::BodyBodyEmpty => "Body: ",
            ProdKind::InitBodyInitBody => {
                "InitBody: TokenCBOpen VarDeclarations TokenCBClose"
            }
            ProdKind::FunctionReadFunctionReadCall => {
                "FunctionRead: TokenRead TokenParOpen TokenId TokenParClose"
            }
            ProdKind::FunctionWriteFunctionWriteCall => {
                "FunctionWrite: TokenWrite TokenParOpen SimpleExpression TokenParClose"
            }
            ProdKind::FunctionIsZeroFunctionIsZeroCall => {
                "FunctionIsZero: TokenIsZero TokenParOpen ArithmeticExpression TokenParClose"
            }
            ProdKind::FunctionConvDateFunctionConvDateVariableCall => {
                "FunctionConvDate: TokenConvDate TokenParOpen TokenDate TokenParClose"
            }
            ProdKind::VarDeclarationsVarDeclarationsSingle => {
                "VarDeclarations: VarDeclaration"
            }
            ProdKind::VarDeclarationsVarDeclarationsRecursive => {
                "VarDeclarations: VarDeclaration VarDeclarations"
            }
            ProdKind::VarDeclarationVarDeclarationSingle => {
                "VarDeclaration: TokenId TokenColon DataType"
            }
            ProdKind::VarDeclarationVarDeclarationRecursive => {
                "VarDeclaration: TokenId TokenComma VarDeclaration"
            }
            ProdKind::ExpressionsExpressionSingle => "Expressions: Statement",
            ProdKind::ExpressionsExpressionRecursive => {
                "Expressions: Statement Expressions"
            }
            ProdKind::StatementStatementAssignment => "Statement: Assignment",
            ProdKind::StatementStatementIfStatement => "Statement: IfStatement",
            ProdKind::StatementStatementElseStatement => "Statement: ElseStatement",
            ProdKind::StatementStatementWhile => "Statement: WhileLoop",
            ProdKind::StatementStatementWrite => "Statement: FunctionWrite",
            ProdKind::StatementStatementRead => "Statement: FunctionRead",
            ProdKind::AssignmentAssignmentExpression => {
                "Assignment: TokenId TokenAssign SimpleExpression"
            }
            ProdKind::AssignmentAssignmentConvDate => {
                "Assignment: TokenId TokenAssign FunctionConvDate"
            }
            ProdKind::DataTypeIntType => "DataType: TokenInt",
            ProdKind::DataTypeFloatType => "DataType: TokenFloat",
            ProdKind::DataTypeStringType => "DataType: TokenString",
            ProdKind::WhileLoopWhile => {
                "WhileLoop: TokenWhile TokenParOpen BooleanExpression TokenParClose TokenCBOpen Body TokenCBClose"
            }
            ProdKind::IfStatementIfStatement => {
                "IfStatement: TokenIf TokenParOpen BooleanExpression TokenParClose TokenCBOpen Body TokenCBClose"
            }
            ProdKind::ElseStatementElseStatement => {
                "ElseStatement: TokenElse TokenCBOpen Body TokenCBClose"
            }
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpression => {
                "BooleanExpression: SimpleExpression BooleanExpressionChain"
            }
            ProdKind::BooleanExpressionBooleanExpressionTrue => {
                "BooleanExpression: TokenTrue"
            }
            ProdKind::BooleanExpressionBooleanExpressionFalse => {
                "BooleanExpression: TokenFalse"
            }
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpressionRecursive => {
                "BooleanExpression: SimpleExpression BooleanExpressionChain Conjunction BooleanExpression"
            }
            ProdKind::BooleanExpressionBooleanExpressionNotStatement => {
                "BooleanExpression: NotStatement"
            }
            ProdKind::BooleanExpressionBooleanExpressionIsZero => {
                "BooleanExpression: FunctionIsZero"
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainAux => {
                "BooleanExpressionChain: ComparisonOp SimpleExpression BooleanExpressionChain"
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainEmpty => {
                "BooleanExpressionChain: "
            }
            ProdKind::SimpleExpressionSimpleExpressionArithmetic => {
                "SimpleExpression: ArithmeticExpression"
            }
            ProdKind::SimpleExpressionSimpleExpressionString => {
                "SimpleExpression: TokenStringLiteral"
            }
            ProdKind::ConjunctionConjunctionAnd => "Conjunction: TokenAnd",
            ProdKind::ConjunctionConjunctionOr => "Conjunction: TokenOr",
            ProdKind::ComparisonOpComparisonOpEqual => "ComparisonOp: TokenEqual",
            ProdKind::ComparisonOpComparisonOpNotEqual => "ComparisonOp: TokenNotEqual",
            ProdKind::ComparisonOpComparisonOpLess => "ComparisonOp: TokenLess",
            ProdKind::ComparisonOpComparisonOpLessEqual => "ComparisonOp: TokenLessEqual",
            ProdKind::ComparisonOpComparisonOpGreater => "ComparisonOp: TokenGreater",
            ProdKind::ComparisonOpComparisonOpGreaterEqual => {
                "ComparisonOp: TokenGreaterEqual"
            }
            ProdKind::NumberNumberInt => "Number: TokenIntLiteral",
            ProdKind::NumberNumberFloat => "Number: TokenFloatLiteral",
            ProdKind::NumberNumberNegativeInt => "Number: TokenSub TokenIntLiteral",
            ProdKind::NumberNumberNegativeFloat => "Number: TokenSub TokenFloatLiteral",
            ProdKind::NotStatementNot => "NotStatement: TokenNot BooleanExpression",
            ProdKind::ArithmeticExpressionArithmeticExpressionSumTerm => {
                "ArithmeticExpression: ArithmeticExpression DummyAE TokenSum Term"
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionSubTerm => {
                "ArithmeticExpression: ArithmeticExpression DummyAE TokenSub Term"
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionTerm => {
                "ArithmeticExpression: Term"
            }
            ProdKind::DummyAEP1 => "DummyAE: ",
            ProdKind::TermTermMulFactor => "Term: Term DummyT TokenMul Factor",
            ProdKind::TermTermDivFactor => "Term: Term DummyT TokenDiv Factor",
            ProdKind::TermTermFactor => "Term: Factor",
            ProdKind::DummyTP1 => "DummyT: ",
            ProdKind::FactorFactorId => "Factor: TokenId",
            ProdKind::FactorFactorNumber => "Factor: Number",
            ProdKind::FactorFactorParen => {
                "Factor: TokenParOpen ArithmeticExpression TokenParClose"
            }
        };
        write!(f, "{name}")
    }
}
#[allow(clippy::upper_case_acronyms)]
#[allow(dead_code)]
#[derive(Clone, Copy, Debug)]
pub enum NonTermKind {
    EMPTY,
    AUG,
    Program,
    Body,
    InitBody,
    FunctionRead,
    FunctionWrite,
    FunctionIsZero,
    FunctionConvDate,
    VarDeclarations,
    VarDeclaration,
    Expressions,
    Statement,
    Assignment,
    DataType,
    WhileLoop,
    IfStatement,
    ElseStatement,
    BooleanExpression,
    BooleanExpressionChain,
    SimpleExpression,
    Conjunction,
    ComparisonOp,
    Number,
    NotStatement,
    ArithmeticExpression,
    DummyAE,
    Term,
    DummyT,
    Factor,
}
impl From<ProdKind> for NonTermKind {
    fn from(prod: ProdKind) -> Self {
        match prod {
            ProdKind::ProgramProgramWithMain => NonTermKind::Program,
            ProdKind::ProgramProgramOnlyBody => NonTermKind::Program,
            ProdKind::BodyBodyInitExpressions => NonTermKind::Body,
            ProdKind::BodyBodyInit => NonTermKind::Body,
            ProdKind::BodyBodyExpressions => NonTermKind::Body,
            ProdKind::BodyBodyEmpty => NonTermKind::Body,
            ProdKind::InitBodyInitBody => NonTermKind::InitBody,
            ProdKind::FunctionReadFunctionReadCall => NonTermKind::FunctionRead,
            ProdKind::FunctionWriteFunctionWriteCall => NonTermKind::FunctionWrite,
            ProdKind::FunctionIsZeroFunctionIsZeroCall => NonTermKind::FunctionIsZero,
            ProdKind::FunctionConvDateFunctionConvDateVariableCall => {
                NonTermKind::FunctionConvDate
            }
            ProdKind::VarDeclarationsVarDeclarationsSingle => {
                NonTermKind::VarDeclarations
            }
            ProdKind::VarDeclarationsVarDeclarationsRecursive => {
                NonTermKind::VarDeclarations
            }
            ProdKind::VarDeclarationVarDeclarationSingle => NonTermKind::VarDeclaration,
            ProdKind::VarDeclarationVarDeclarationRecursive => {
                NonTermKind::VarDeclaration
            }
            ProdKind::ExpressionsExpressionSingle => NonTermKind::Expressions,
            ProdKind::ExpressionsExpressionRecursive => NonTermKind::Expressions,
            ProdKind::StatementStatementAssignment => NonTermKind::Statement,
            ProdKind::StatementStatementIfStatement => NonTermKind::Statement,
            ProdKind::StatementStatementElseStatement => NonTermKind::Statement,
            ProdKind::StatementStatementWhile => NonTermKind::Statement,
            ProdKind::StatementStatementWrite => NonTermKind::Statement,
            ProdKind::StatementStatementRead => NonTermKind::Statement,
            ProdKind::AssignmentAssignmentExpression => NonTermKind::Assignment,
            ProdKind::AssignmentAssignmentConvDate => NonTermKind::Assignment,
            ProdKind::DataTypeIntType => NonTermKind::DataType,
            ProdKind::DataTypeFloatType => NonTermKind::DataType,
            ProdKind::DataTypeStringType => NonTermKind::DataType,
            ProdKind::WhileLoopWhile => NonTermKind::WhileLoop,
            ProdKind::IfStatementIfStatement => NonTermKind::IfStatement,
            ProdKind::ElseStatementElseStatement => NonTermKind::ElseStatement,
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpression => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionTrue => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionFalse => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionSimpleExpressionRecursive => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionNotStatement => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionBooleanExpressionIsZero => {
                NonTermKind::BooleanExpression
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainAux => {
                NonTermKind::BooleanExpressionChain
            }
            ProdKind::BooleanExpressionChainBooleanExpressionChainEmpty => {
                NonTermKind::BooleanExpressionChain
            }
            ProdKind::SimpleExpressionSimpleExpressionArithmetic => {
                NonTermKind::SimpleExpression
            }
            ProdKind::SimpleExpressionSimpleExpressionString => {
                NonTermKind::SimpleExpression
            }
            ProdKind::ConjunctionConjunctionAnd => NonTermKind::Conjunction,
            ProdKind::ConjunctionConjunctionOr => NonTermKind::Conjunction,
            ProdKind::ComparisonOpComparisonOpEqual => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpNotEqual => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpLess => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpLessEqual => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpGreater => NonTermKind::ComparisonOp,
            ProdKind::ComparisonOpComparisonOpGreaterEqual => NonTermKind::ComparisonOp,
            ProdKind::NumberNumberInt => NonTermKind::Number,
            ProdKind::NumberNumberFloat => NonTermKind::Number,
            ProdKind::NumberNumberNegativeInt => NonTermKind::Number,
            ProdKind::NumberNumberNegativeFloat => NonTermKind::Number,
            ProdKind::NotStatementNot => NonTermKind::NotStatement,
            ProdKind::ArithmeticExpressionArithmeticExpressionSumTerm => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionSubTerm => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::ArithmeticExpressionArithmeticExpressionTerm => {
                NonTermKind::ArithmeticExpression
            }
            ProdKind::DummyAEP1 => NonTermKind::DummyAE,
            ProdKind::TermTermMulFactor => NonTermKind::Term,
            ProdKind::TermTermDivFactor => NonTermKind::Term,
            ProdKind::TermTermFactor => NonTermKind::Term,
            ProdKind::DummyTP1 => NonTermKind::DummyT,
            ProdKind::FactorFactorId => NonTermKind::Factor,
            ProdKind::FactorFactorNumber => NonTermKind::Factor,
            ProdKind::FactorFactorParen => NonTermKind::Factor,
        }
    }
}
#[allow(clippy::enum_variant_names)]
#[derive(Default, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub enum State {
    #[default]
    AUGS0,
    TokenIdS1,
    TokenInitS2,
    TokenWhileS3,
    TokenIfS4,
    TokenElseS5,
    TokenReadS6,
    TokenWriteS7,
    ProgramS8,
    BodyS9,
    FunctionReadS10,
    FunctionWriteS11,
    ExpressionsS12,
    StatementS13,
    AssignmentS14,
    WhileLoopS15,
    IfStatementS16,
    ElseStatementS17,
    TokenAssignS18,
    TokenParOpenS19,
    TokenCBOpenS20,
    InitBodyS21,
    TokenParOpenS22,
    TokenParOpenS23,
    TokenCBOpenS24,
    TokenParOpenS25,
    TokenParOpenS26,
    TokenIdS27,
    ExpressionsS28,
    TokenIntLiteralS29,
    TokenFloatLiteralS30,
    TokenStringLiteralS31,
    TokenIdS32,
    TokenSubS33,
    TokenParOpenS34,
    TokenConvDateS35,
    FunctionConvDateS36,
    SimpleExpressionS37,
    NumberS38,
    ArithmeticExpressionS39,
    TermS40,
    FactorS41,
    TokenParCloseS42,
    TokenIdS43,
    VarDeclarationsS44,
    VarDeclarationS45,
    ExpressionsS46,
    TokenTrueS47,
    TokenFalseS48,
    TokenNotS49,
    TokenIsZeroS50,
    FunctionIsZeroS51,
    BooleanExpressionS52,
    SimpleExpressionS53,
    NotStatementS54,
    BooleanExpressionS55,
    BodyS56,
    TokenIdS57,
    SimpleExpressionS58,
    TokenIntLiteralS59,
    TokenFloatLiteralS60,
    ArithmeticExpressionS61,
    TokenParOpenS62,
    DummyAES63,
    DummyTS64,
    TokenCBOpenS65,
    TokenColonS66,
    TokenCommaS67,
    TokenCBCloseS68,
    VarDeclarationsS69,
    BooleanExpressionS70,
    TokenParOpenS71,
    TokenParCloseS72,
    TokenEqualS73,
    TokenNotEqualS74,
    TokenLessS75,
    TokenLessEqualS76,
    TokenGreaterS77,
    TokenGreaterEqualS78,
    BooleanExpressionChainS79,
    ComparisonOpS80,
    TokenParCloseS81,
    TokenCBCloseS82,
    TokenParCloseS83,
    TokenParCloseS84,
    TokenParCloseS85,
    TokenDateS86,
    TokenSumS87,
    TokenSubS88,
    TokenMulS89,
    TokenDivS90,
    BodyS91,
    TokenIntS92,
    TokenFloatS93,
    TokenStringS94,
    DataTypeS95,
    VarDeclarationS96,
    ArithmeticExpressionS97,
    TokenCBOpenS98,
    TokenAndS99,
    TokenOrS100,
    ConjunctionS101,
    SimpleExpressionS102,
    TokenCBOpenS103,
    TokenParCloseS104,
    TermS105,
    TermS106,
    FactorS107,
    FactorS108,
    TokenCBCloseS109,
    TokenParCloseS110,
    BodyS111,
    BooleanExpressionS112,
    BooleanExpressionChainS113,
    BodyS114,
    TokenCBCloseS115,
    TokenCBCloseS116,
}
impl StateT for State {
    fn default_layout() -> Option<Self> {
        None
    }
}
impl From<State> for usize {
    fn from(s: State) -> Self {
        s as usize
    }
}
impl std::fmt::Debug for State {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let name = match self {
            State::AUGS0 => "0:AUG",
            State::TokenIdS1 => "1:TokenId",
            State::TokenInitS2 => "2:TokenInit",
            State::TokenWhileS3 => "3:TokenWhile",
            State::TokenIfS4 => "4:TokenIf",
            State::TokenElseS5 => "5:TokenElse",
            State::TokenReadS6 => "6:TokenRead",
            State::TokenWriteS7 => "7:TokenWrite",
            State::ProgramS8 => "8:Program",
            State::BodyS9 => "9:Body",
            State::FunctionReadS10 => "10:FunctionRead",
            State::FunctionWriteS11 => "11:FunctionWrite",
            State::ExpressionsS12 => "12:Expressions",
            State::StatementS13 => "13:Statement",
            State::AssignmentS14 => "14:Assignment",
            State::WhileLoopS15 => "15:WhileLoop",
            State::IfStatementS16 => "16:IfStatement",
            State::ElseStatementS17 => "17:ElseStatement",
            State::TokenAssignS18 => "18:TokenAssign",
            State::TokenParOpenS19 => "19:TokenParOpen",
            State::TokenCBOpenS20 => "20:TokenCBOpen",
            State::InitBodyS21 => "21:InitBody",
            State::TokenParOpenS22 => "22:TokenParOpen",
            State::TokenParOpenS23 => "23:TokenParOpen",
            State::TokenCBOpenS24 => "24:TokenCBOpen",
            State::TokenParOpenS25 => "25:TokenParOpen",
            State::TokenParOpenS26 => "26:TokenParOpen",
            State::TokenIdS27 => "27:TokenId",
            State::ExpressionsS28 => "28:Expressions",
            State::TokenIntLiteralS29 => "29:TokenIntLiteral",
            State::TokenFloatLiteralS30 => "30:TokenFloatLiteral",
            State::TokenStringLiteralS31 => "31:TokenStringLiteral",
            State::TokenIdS32 => "32:TokenId",
            State::TokenSubS33 => "33:TokenSub",
            State::TokenParOpenS34 => "34:TokenParOpen",
            State::TokenConvDateS35 => "35:TokenConvDate",
            State::FunctionConvDateS36 => "36:FunctionConvDate",
            State::SimpleExpressionS37 => "37:SimpleExpression",
            State::NumberS38 => "38:Number",
            State::ArithmeticExpressionS39 => "39:ArithmeticExpression",
            State::TermS40 => "40:Term",
            State::FactorS41 => "41:Factor",
            State::TokenParCloseS42 => "42:TokenParClose",
            State::TokenIdS43 => "43:TokenId",
            State::VarDeclarationsS44 => "44:VarDeclarations",
            State::VarDeclarationS45 => "45:VarDeclaration",
            State::ExpressionsS46 => "46:Expressions",
            State::TokenTrueS47 => "47:TokenTrue",
            State::TokenFalseS48 => "48:TokenFalse",
            State::TokenNotS49 => "49:TokenNot",
            State::TokenIsZeroS50 => "50:TokenIsZero",
            State::FunctionIsZeroS51 => "51:FunctionIsZero",
            State::BooleanExpressionS52 => "52:BooleanExpression",
            State::SimpleExpressionS53 => "53:SimpleExpression",
            State::NotStatementS54 => "54:NotStatement",
            State::BooleanExpressionS55 => "55:BooleanExpression",
            State::BodyS56 => "56:Body",
            State::TokenIdS57 => "57:TokenId",
            State::SimpleExpressionS58 => "58:SimpleExpression",
            State::TokenIntLiteralS59 => "59:TokenIntLiteral",
            State::TokenFloatLiteralS60 => "60:TokenFloatLiteral",
            State::ArithmeticExpressionS61 => "61:ArithmeticExpression",
            State::TokenParOpenS62 => "62:TokenParOpen",
            State::DummyAES63 => "63:DummyAE",
            State::DummyTS64 => "64:DummyT",
            State::TokenCBOpenS65 => "65:TokenCBOpen",
            State::TokenColonS66 => "66:TokenColon",
            State::TokenCommaS67 => "67:TokenComma",
            State::TokenCBCloseS68 => "68:TokenCBClose",
            State::VarDeclarationsS69 => "69:VarDeclarations",
            State::BooleanExpressionS70 => "70:BooleanExpression",
            State::TokenParOpenS71 => "71:TokenParOpen",
            State::TokenParCloseS72 => "72:TokenParClose",
            State::TokenEqualS73 => "73:TokenEqual",
            State::TokenNotEqualS74 => "74:TokenNotEqual",
            State::TokenLessS75 => "75:TokenLess",
            State::TokenLessEqualS76 => "76:TokenLessEqual",
            State::TokenGreaterS77 => "77:TokenGreater",
            State::TokenGreaterEqualS78 => "78:TokenGreaterEqual",
            State::BooleanExpressionChainS79 => "79:BooleanExpressionChain",
            State::ComparisonOpS80 => "80:ComparisonOp",
            State::TokenParCloseS81 => "81:TokenParClose",
            State::TokenCBCloseS82 => "82:TokenCBClose",
            State::TokenParCloseS83 => "83:TokenParClose",
            State::TokenParCloseS84 => "84:TokenParClose",
            State::TokenParCloseS85 => "85:TokenParClose",
            State::TokenDateS86 => "86:TokenDate",
            State::TokenSumS87 => "87:TokenSum",
            State::TokenSubS88 => "88:TokenSub",
            State::TokenMulS89 => "89:TokenMul",
            State::TokenDivS90 => "90:TokenDiv",
            State::BodyS91 => "91:Body",
            State::TokenIntS92 => "92:TokenInt",
            State::TokenFloatS93 => "93:TokenFloat",
            State::TokenStringS94 => "94:TokenString",
            State::DataTypeS95 => "95:DataType",
            State::VarDeclarationS96 => "96:VarDeclaration",
            State::ArithmeticExpressionS97 => "97:ArithmeticExpression",
            State::TokenCBOpenS98 => "98:TokenCBOpen",
            State::TokenAndS99 => "99:TokenAnd",
            State::TokenOrS100 => "100:TokenOr",
            State::ConjunctionS101 => "101:Conjunction",
            State::SimpleExpressionS102 => "102:SimpleExpression",
            State::TokenCBOpenS103 => "103:TokenCBOpen",
            State::TokenParCloseS104 => "104:TokenParClose",
            State::TermS105 => "105:Term",
            State::TermS106 => "106:Term",
            State::FactorS107 => "107:Factor",
            State::FactorS108 => "108:Factor",
            State::TokenCBCloseS109 => "109:TokenCBClose",
            State::TokenParCloseS110 => "110:TokenParClose",
            State::BodyS111 => "111:Body",
            State::BooleanExpressionS112 => "112:BooleanExpression",
            State::BooleanExpressionChainS113 => "113:BooleanExpressionChain",
            State::BodyS114 => "114:Body",
            State::TokenCBCloseS115 => "115:TokenCBClose",
            State::TokenCBCloseS116 => "116:TokenCBClose",
        };
        write!(f, "{name}")
    }
}
type ActionFn = fn(token: TokenKind) -> Vec<Action<State, ProdKind>>;
pub struct RulesParserDefinition {
    actions: [ActionFn; STATE_COUNT],
    gotos: [fn(nonterm: NonTermKind) -> State; STATE_COUNT],
    token_kinds: [[Option<(TokenKind, bool)>; MAX_RECOGNIZERS]; STATE_COUNT],
}
fn action_aug_s0(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS1)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        _ => vec![],
    }
}
fn action_tokenid_s1(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenAssign => Vec::from(&[Shift(State::TokenAssignS18)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS19)]),
        _ => vec![],
    }
}
fn action_tokeninit_s2(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS20)]),
        _ => vec![],
    }
}
fn action_tokenwhile_s3(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS22)]),
        _ => vec![],
    }
}
fn action_tokenif_s4(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS23)]),
        _ => vec![],
    }
}
fn action_tokenelse_s5(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS24)]),
        _ => vec![],
    }
}
fn action_tokenread_s6(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS25)]),
        _ => vec![],
    }
}
fn action_tokenwrite_s7(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS26)]),
        _ => vec![],
    }
}
fn action_program_s8(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Accept]),
        _ => vec![],
    }
}
fn action_body_s9(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ProgramProgramOnlyBody, 1usize)]),
        _ => vec![],
    }
}
fn action_functionread_s10(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementRead, 1usize)]),
        _ => vec![],
    }
}
fn action_functionwrite_s11(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementWrite, 1usize)]),
        _ => vec![],
    }
}
fn action_expressions_s12(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BodyBodyExpressions, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyExpressions, 1usize)]),
        _ => vec![],
    }
}
fn action_statement_s13(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExpressionsExpressionSingle, 1usize)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS27)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::ExpressionsExpressionSingle, 1usize)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        _ => vec![],
    }
}
fn action_assignment_s14(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)])
        }
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementAssignment, 1usize)]),
        _ => vec![],
    }
}
fn action_whileloop_s15(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementWhile, 1usize)]),
        _ => vec![],
    }
}
fn action_ifstatement_s16(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)])
        }
        TK::TokenWhile => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::StatementStatementIfStatement, 1usize)]),
        _ => vec![],
    }
}
fn action_elsestatement_s17(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)]),
        TK::TokenElse => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenRead => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::StatementStatementElseStatement, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenassign_s18(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS31)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        TK::TokenConvDate => Vec::from(&[Shift(State::TokenConvDateS35)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s19(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS42)]),
        _ => vec![],
    }
}
fn action_tokencbopen_s20(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS43)]),
        _ => vec![],
    }
}
fn action_initbody_s21(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BodyBodyInit, 2usize)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS27)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyInit, 2usize)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s22(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS31)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        TK::TokenTrue => Vec::from(&[Shift(State::TokenTrueS47)]),
        TK::TokenFalse => Vec::from(&[Shift(State::TokenFalseS48)]),
        TK::TokenNot => Vec::from(&[Shift(State::TokenNotS49)]),
        TK::TokenIsZero => Vec::from(&[Shift(State::TokenIsZeroS50)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s23(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS31)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        TK::TokenTrue => Vec::from(&[Shift(State::TokenTrueS47)]),
        TK::TokenFalse => Vec::from(&[Shift(State::TokenFalseS48)]),
        TK::TokenNot => Vec::from(&[Shift(State::TokenNotS49)]),
        TK::TokenIsZero => Vec::from(&[Shift(State::TokenIsZeroS50)]),
        _ => vec![],
    }
}
fn action_tokencbopen_s24(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS27)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s25(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS57)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s26(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS31)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        _ => vec![],
    }
}
fn action_tokenid_s27(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenAssign => Vec::from(&[Shift(State::TokenAssignS18)]),
        _ => vec![],
    }
}
fn action_expressions_s28(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ExpressionsExpressionRecursive, 2usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::ExpressionsExpressionRecursive, 2usize)])
        }
        _ => vec![],
    }
}
fn action_tokenintliteral_s29(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::NumberNumberInt, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenfloatliteral_s30(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::NumberNumberFloat, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenstringliteral_s31(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenId => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenNotEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenLess => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenLessEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenGreater => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenGreaterEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenIf => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenElse => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenAnd => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenOr => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenRead => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionString, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenid_s32(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::FactorFactorId, 1usize)]),
        _ => vec![],
    }
}
fn action_tokensub_s33(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS59)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS60)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s34(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        _ => vec![],
    }
}
fn action_tokenconvdate_s35(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS62)]),
        _ => vec![],
    }
}
fn action_functionconvdate_s36(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::AssignmentAssignmentConvDate, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::AssignmentAssignmentConvDate, 3usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::AssignmentAssignmentConvDate, 3usize)])
        }
        TK::TokenWhile => Vec::from(&[Reduce(PK::AssignmentAssignmentConvDate, 3usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::AssignmentAssignmentConvDate, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::AssignmentAssignmentConvDate, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::AssignmentAssignmentConvDate, 3usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::AssignmentAssignmentConvDate, 3usize)]),
        _ => vec![],
    }
}
fn action_simpleexpression_s37(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::AssignmentAssignmentExpression, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::AssignmentAssignmentExpression, 3usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::AssignmentAssignmentExpression, 3usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::AssignmentAssignmentExpression, 3usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::AssignmentAssignmentExpression, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::AssignmentAssignmentExpression, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::AssignmentAssignmentExpression, 3usize)]),
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::AssignmentAssignmentExpression, 3usize)])
        }
        _ => vec![],
    }
}
fn action_number_s38(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::FactorFactorNumber, 1usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s39(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenId => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenSum => Vec::from(&[Reduce(PK::DummyAEP1, 0usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::DummyAEP1, 0usize)]),
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenNotEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenLess => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenLessEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenGreater => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenGreaterEqual => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenIf => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenElse => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenAnd => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenOr => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenRead => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::SimpleExpressionSimpleExpressionArithmetic, 1usize)])
        }
        _ => vec![],
    }
}
fn action_term_s40(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenId => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenSum => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenMul => Vec::from(&[Reduce(PK::DummyTP1, 0usize)]),
        TK::TokenSub => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenDiv => Vec::from(&[Reduce(PK::DummyTP1, 0usize)]),
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenCBClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenWhile => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenNotEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenLess => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenLessEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenGreater => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenGreaterEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenIf => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenElse => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenRead => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        TK::TokenWrite => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionTerm, 1usize)],
            )
        }
        _ => vec![],
    }
}
fn action_factor_s41(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::TermTermFactor, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s42(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS65)]),
        _ => vec![],
    }
}
fn action_tokenid_s43(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenColon => Vec::from(&[Shift(State::TokenColonS66)]),
        TK::TokenComma => Vec::from(&[Shift(State::TokenCommaS67)]),
        _ => vec![],
    }
}
fn action_vardeclarations_s44(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS68)]),
        _ => vec![],
    }
}
fn action_vardeclaration_s45(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS43)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::VarDeclarationsVarDeclarationsSingle, 1usize)])
        }
        _ => vec![],
    }
}
fn action_expressions_s46(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::BodyBodyInitExpressions, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyInitExpressions, 3usize)]),
        _ => vec![],
    }
}
fn action_tokentrue_s47(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::BooleanExpressionBooleanExpressionTrue, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenfalse_s48(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::BooleanExpressionBooleanExpressionFalse, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokennot_s49(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS31)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        TK::TokenTrue => Vec::from(&[Shift(State::TokenTrueS47)]),
        TK::TokenFalse => Vec::from(&[Shift(State::TokenFalseS48)]),
        TK::TokenNot => Vec::from(&[Shift(State::TokenNotS49)]),
        TK::TokenIsZero => Vec::from(&[Shift(State::TokenIsZeroS50)]),
        _ => vec![],
    }
}
fn action_tokeniszero_s50(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS71)]),
        _ => vec![],
    }
}
fn action_functioniszero_s51(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::BooleanExpressionBooleanExpressionIsZero, 1usize)])
        }
        _ => vec![],
    }
}
fn action_booleanexpression_s52(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS72)]),
        _ => vec![],
    }
}
fn action_simpleexpression_s53(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        TK::TokenEqual => Vec::from(&[Shift(State::TokenEqualS73)]),
        TK::TokenNotEqual => Vec::from(&[Shift(State::TokenNotEqualS74)]),
        TK::TokenLess => Vec::from(&[Shift(State::TokenLessS75)]),
        TK::TokenLessEqual => Vec::from(&[Shift(State::TokenLessEqualS76)]),
        TK::TokenGreater => Vec::from(&[Shift(State::TokenGreaterS77)]),
        TK::TokenGreaterEqual => Vec::from(&[Shift(State::TokenGreaterEqualS78)]),
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        _ => vec![],
    }
}
fn action_notstatement_s54(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionBooleanExpressionNotStatement, 1usize)],
            )
        }
        _ => vec![],
    }
}
fn action_booleanexpression_s55(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS81)]),
        _ => vec![],
    }
}
fn action_body_s56(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS82)]),
        _ => vec![],
    }
}
fn action_tokenid_s57(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS83)]),
        _ => vec![],
    }
}
fn action_simpleexpression_s58(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS84)]),
        _ => vec![],
    }
}
fn action_tokenintliteral_s59(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenGreaterEqual => {
            Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::NumberNumberNegativeInt, 2usize)]),
        _ => vec![],
    }
}
fn action_tokenfloatliteral_s60(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenGreaterEqual => {
            Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::NumberNumberNegativeFloat, 2usize)]),
        _ => vec![],
    }
}
fn action_arithmeticexpression_s61(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenSum => Vec::from(&[Reduce(PK::DummyAEP1, 0usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::DummyAEP1, 0usize)]),
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS85)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s62(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenDate => Vec::from(&[Shift(State::TokenDateS86)]),
        _ => vec![],
    }
}
fn action_dummyae_s63(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenSum => Vec::from(&[Shift(State::TokenSumS87)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS88)]),
        _ => vec![],
    }
}
fn action_dummyt_s64(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenMul => Vec::from(&[Shift(State::TokenMulS89)]),
        TK::TokenDiv => Vec::from(&[Shift(State::TokenDivS90)]),
        _ => vec![],
    }
}
fn action_tokencbopen_s65(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS27)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        _ => vec![],
    }
}
fn action_tokencolon_s66(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenInt => Vec::from(&[Shift(State::TokenIntS92)]),
        TK::TokenFloat => Vec::from(&[Shift(State::TokenFloatS93)]),
        TK::TokenString => Vec::from(&[Shift(State::TokenStringS94)]),
        _ => vec![],
    }
}
fn action_tokencomma_s67(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS43)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s68(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::InitBodyInitBody, 3usize)]),
        _ => vec![],
    }
}
fn action_vardeclarations_s69(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::VarDeclarationsVarDeclarationsRecursive, 2usize)])
        }
        _ => vec![],
    }
}
fn action_booleanexpression_s70(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Reduce(PK::NotStatementNot, 2usize)]),
        _ => vec![],
    }
}
fn action_tokenparopen_s71(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s72(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS98)]),
        _ => vec![],
    }
}
fn action_tokenequal_s73(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)]),
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpEqual, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokennotequal_s74(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)]),
        TK::TokenSub => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpNotEqual, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenless_s75(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)]),
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLess, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokenlessequal_s76(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenId => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenSub => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpLessEqual, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokengreater_s77(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)]),
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreater, 1usize)])
        }
        _ => vec![],
    }
}
fn action_tokengreaterequal_s78(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenId => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenSub => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        TK::TokenParOpen => {
            Vec::from(&[Reduce(PK::ComparisonOpComparisonOpGreaterEqual, 1usize)])
        }
        _ => vec![],
    }
}
fn action_booleanexpressionchain_s79(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionBooleanExpressionSimpleExpression, 2usize)],
            )
        }
        TK::TokenAnd => Vec::from(&[Shift(State::TokenAndS99)]),
        TK::TokenOr => Vec::from(&[Shift(State::TokenOrS100)]),
        _ => vec![],
    }
}
fn action_comparisonop_s80(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS31)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s81(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBOpen => Vec::from(&[Shift(State::TokenCBOpenS103)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s82(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::ElseStatementElseStatement, 4usize)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s83(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)])
        }
        TK::TokenWhile => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::FunctionReadFunctionReadCall, 4usize)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s84(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)])
        }
        TK::TokenWhile => {
            Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)])
        }
        TK::TokenIf => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)]),
        TK::TokenWrite => {
            Vec::from(&[Reduce(PK::FunctionWriteFunctionWriteCall, 4usize)])
        }
        _ => vec![],
    }
}
fn action_tokenparclose_s85(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::FactorFactorParen, 3usize)]),
        _ => vec![],
    }
}
fn action_tokendate_s86(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS104)]),
        _ => vec![],
    }
}
fn action_tokensum_s87(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        _ => vec![],
    }
}
fn action_tokensub_s88(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        _ => vec![],
    }
}
fn action_tokenmul_s89(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        _ => vec![],
    }
}
fn action_tokendiv_s90(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        _ => vec![],
    }
}
fn action_body_s91(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS109)]),
        _ => vec![],
    }
}
fn action_tokenint_s92(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Reduce(PK::DataTypeIntType, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::DataTypeIntType, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenfloat_s93(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Reduce(PK::DataTypeFloatType, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::DataTypeFloatType, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenstring_s94(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Reduce(PK::DataTypeStringType, 1usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::DataTypeStringType, 1usize)]),
        _ => vec![],
    }
}
fn action_datatype_s95(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => {
            Vec::from(&[Reduce(PK::VarDeclarationVarDeclarationSingle, 3usize)])
        }
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::VarDeclarationVarDeclarationSingle, 3usize)])
        }
        _ => vec![],
    }
}
fn action_vardeclaration_s96(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => {
            Vec::from(&[Reduce(PK::VarDeclarationVarDeclarationRecursive, 3usize)])
        }
        TK::TokenCBClose => {
            Vec::from(&[Reduce(PK::VarDeclarationVarDeclarationRecursive, 3usize)])
        }
        _ => vec![],
    }
}
fn action_arithmeticexpression_s97(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenSum => Vec::from(&[Reduce(PK::DummyAEP1, 0usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::DummyAEP1, 0usize)]),
        TK::TokenParClose => Vec::from(&[Shift(State::TokenParCloseS110)]),
        _ => vec![],
    }
}
fn action_tokencbopen_s98(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS27)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        _ => vec![],
    }
}
fn action_tokenand_s99(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)])
        }
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenParOpen => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenTrue => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenFalse => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenNot => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        TK::TokenIsZero => Vec::from(&[Reduce(PK::ConjunctionConjunctionAnd, 1usize)]),
        _ => vec![],
    }
}
fn action_tokenor_s100(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenFloatLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)])
        }
        TK::TokenStringLiteral => {
            Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)])
        }
        TK::TokenId => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenParOpen => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenTrue => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenFalse => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenNot => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        TK::TokenIsZero => Vec::from(&[Reduce(PK::ConjunctionConjunctionOr, 1usize)]),
        _ => vec![],
    }
}
fn action_conjunction_s101(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenIntLiteral => Vec::from(&[Shift(State::TokenIntLiteralS29)]),
        TK::TokenFloatLiteral => Vec::from(&[Shift(State::TokenFloatLiteralS30)]),
        TK::TokenStringLiteral => Vec::from(&[Shift(State::TokenStringLiteralS31)]),
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS32)]),
        TK::TokenSub => Vec::from(&[Shift(State::TokenSubS33)]),
        TK::TokenParOpen => Vec::from(&[Shift(State::TokenParOpenS34)]),
        TK::TokenTrue => Vec::from(&[Shift(State::TokenTrueS47)]),
        TK::TokenFalse => Vec::from(&[Shift(State::TokenFalseS48)]),
        TK::TokenNot => Vec::from(&[Shift(State::TokenNotS49)]),
        TK::TokenIsZero => Vec::from(&[Shift(State::TokenIsZeroS50)]),
        _ => vec![],
    }
}
fn action_simpleexpression_s102(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        TK::TokenEqual => Vec::from(&[Shift(State::TokenEqualS73)]),
        TK::TokenNotEqual => Vec::from(&[Shift(State::TokenNotEqualS74)]),
        TK::TokenLess => Vec::from(&[Shift(State::TokenLessS75)]),
        TK::TokenLessEqual => Vec::from(&[Shift(State::TokenLessEqualS76)]),
        TK::TokenGreater => Vec::from(&[Shift(State::TokenGreaterS77)]),
        TK::TokenGreaterEqual => Vec::from(&[Shift(State::TokenGreaterEqualS78)]),
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainEmpty, 0usize)],
            )
        }
        _ => vec![],
    }
}
fn action_tokencbopen_s103(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenId => Vec::from(&[Shift(State::TokenIdS27)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::BodyBodyEmpty, 0usize)]),
        TK::TokenInit => Vec::from(&[Shift(State::TokenInitS2)]),
        TK::TokenWhile => Vec::from(&[Shift(State::TokenWhileS3)]),
        TK::TokenIf => Vec::from(&[Shift(State::TokenIfS4)]),
        TK::TokenElse => Vec::from(&[Shift(State::TokenElseS5)]),
        TK::TokenRead => Vec::from(&[Shift(State::TokenReadS6)]),
        TK::TokenWrite => Vec::from(&[Shift(State::TokenWriteS7)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s104(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenId => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenCBClose => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenWhile => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenIf => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenElse => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenRead => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        TK::TokenWrite => {
            Vec::from(
                &[Reduce(PK::FunctionConvDateFunctionConvDateVariableCall, 4usize)],
            )
        }
        _ => vec![],
    }
}
fn action_term_s105(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenId => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenSum => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenMul => Vec::from(&[Reduce(PK::DummyTP1, 0usize)]),
        TK::TokenSub => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenDiv => Vec::from(&[Reduce(PK::DummyTP1, 0usize)]),
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenCBClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenWhile => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenNotEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenLess => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenLessEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenGreater => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenGreaterEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenIf => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenElse => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenRead => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        TK::TokenWrite => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSumTerm, 4usize)],
            )
        }
        _ => vec![],
    }
}
fn action_term_s106(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenId => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenSum => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenMul => Vec::from(&[Reduce(PK::DummyTP1, 0usize)]),
        TK::TokenSub => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenDiv => Vec::from(&[Reduce(PK::DummyTP1, 0usize)]),
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenCBClose => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenWhile => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenNotEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenLess => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenLessEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenGreater => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenGreaterEqual => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenIf => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenElse => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenRead => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        TK::TokenWrite => {
            Vec::from(
                &[Reduce(PK::ArithmeticExpressionArithmeticExpressionSubTerm, 4usize)],
            )
        }
        _ => vec![],
    }
}
fn action_factor_s107(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::TermTermMulFactor, 4usize)]),
        _ => vec![],
    }
}
fn action_factor_s108(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenSum => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenMul => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenSub => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenDiv => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenParClose => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenEqual => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenNotEqual => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenLess => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenLessEqual => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenGreater => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenGreaterEqual => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenAnd => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenOr => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::TermTermDivFactor, 4usize)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s109(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::ProgramProgramWithMain, 6usize)]),
        _ => vec![],
    }
}
fn action_tokenparclose_s110(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(&[Reduce(PK::FunctionIsZeroFunctionIsZeroCall, 4usize)])
        }
        _ => vec![],
    }
}
fn action_body_s111(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS115)]),
        _ => vec![],
    }
}
fn action_booleanexpression_s112(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[
                    Reduce(
                        PK::BooleanExpressionBooleanExpressionSimpleExpressionRecursive,
                        4usize,
                    ),
                ],
            )
        }
        _ => vec![],
    }
}
fn action_booleanexpressionchain_s113(
    token_kind: TokenKind,
) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenParClose => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainAux, 3usize)],
            )
        }
        TK::TokenAnd => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainAux, 3usize)],
            )
        }
        TK::TokenOr => {
            Vec::from(
                &[Reduce(PK::BooleanExpressionChainBooleanExpressionChainAux, 3usize)],
            )
        }
        _ => vec![],
    }
}
fn action_body_s114(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::TokenCBClose => Vec::from(&[Shift(State::TokenCBCloseS116)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s115(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::WhileLoopWhile, 7usize)]),
        _ => vec![],
    }
}
fn action_tokencbclose_s116(token_kind: TokenKind) -> Vec<Action<State, ProdKind>> {
    match token_kind {
        TK::STOP => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenId => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenCBClose => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenWhile => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenIf => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenElse => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenRead => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        TK::TokenWrite => Vec::from(&[Reduce(PK::IfStatementIfStatement, 7usize)]),
        _ => vec![],
    }
}
fn goto_aug_s0(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Program => State::ProgramS8,
        NonTermKind::Body => State::BodyS9,
        NonTermKind::FunctionRead => State::FunctionReadS10,
        NonTermKind::FunctionWrite => State::FunctionWriteS11,
        NonTermKind::Expressions => State::ExpressionsS12,
        NonTermKind::Statement => State::StatementS13,
        NonTermKind::Assignment => State::AssignmentS14,
        NonTermKind::WhileLoop => State::WhileLoopS15,
        NonTermKind::IfStatement => State::IfStatementS16,
        NonTermKind::ElseStatement => State::ElseStatementS17,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::AUGS0
            )
        }
    }
}
fn goto_tokeninit_s2(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::InitBody => State::InitBodyS21,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenInitS2
            )
        }
    }
}
fn goto_statement_s13(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionRead => State::FunctionReadS10,
        NonTermKind::FunctionWrite => State::FunctionWriteS11,
        NonTermKind::Expressions => State::ExpressionsS28,
        NonTermKind::Statement => State::StatementS13,
        NonTermKind::Assignment => State::AssignmentS14,
        NonTermKind::WhileLoop => State::WhileLoopS15,
        NonTermKind::IfStatement => State::IfStatementS16,
        NonTermKind::ElseStatement => State::ElseStatementS17,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::StatementS13
            )
        }
    }
}
fn goto_tokenassign_s18(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionConvDate => State::FunctionConvDateS36,
        NonTermKind::SimpleExpression => State::SimpleExpressionS37,
        NonTermKind::Number => State::NumberS38,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS39,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenAssignS18
            )
        }
    }
}
fn goto_tokencbopen_s20(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::VarDeclarations => State::VarDeclarationsS44,
        NonTermKind::VarDeclaration => State::VarDeclarationS45,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS20
            )
        }
    }
}
fn goto_initbody_s21(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionRead => State::FunctionReadS10,
        NonTermKind::FunctionWrite => State::FunctionWriteS11,
        NonTermKind::Expressions => State::ExpressionsS46,
        NonTermKind::Statement => State::StatementS13,
        NonTermKind::Assignment => State::AssignmentS14,
        NonTermKind::WhileLoop => State::WhileLoopS15,
        NonTermKind::IfStatement => State::IfStatementS16,
        NonTermKind::ElseStatement => State::ElseStatementS17,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::InitBodyS21
            )
        }
    }
}
fn goto_tokenparopen_s22(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionIsZero => State::FunctionIsZeroS51,
        NonTermKind::BooleanExpression => State::BooleanExpressionS52,
        NonTermKind::SimpleExpression => State::SimpleExpressionS53,
        NonTermKind::Number => State::NumberS38,
        NonTermKind::NotStatement => State::NotStatementS54,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS39,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS22
            )
        }
    }
}
fn goto_tokenparopen_s23(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionIsZero => State::FunctionIsZeroS51,
        NonTermKind::BooleanExpression => State::BooleanExpressionS55,
        NonTermKind::SimpleExpression => State::SimpleExpressionS53,
        NonTermKind::Number => State::NumberS38,
        NonTermKind::NotStatement => State::NotStatementS54,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS39,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS23
            )
        }
    }
}
fn goto_tokencbopen_s24(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Body => State::BodyS56,
        NonTermKind::FunctionRead => State::FunctionReadS10,
        NonTermKind::FunctionWrite => State::FunctionWriteS11,
        NonTermKind::Expressions => State::ExpressionsS12,
        NonTermKind::Statement => State::StatementS13,
        NonTermKind::Assignment => State::AssignmentS14,
        NonTermKind::WhileLoop => State::WhileLoopS15,
        NonTermKind::IfStatement => State::IfStatementS16,
        NonTermKind::ElseStatement => State::ElseStatementS17,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS24
            )
        }
    }
}
fn goto_tokenparopen_s26(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SimpleExpression => State::SimpleExpressionS58,
        NonTermKind::Number => State::NumberS38,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS39,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS26
            )
        }
    }
}
fn goto_tokenparopen_s34(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS38,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS61,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS34
            )
        }
    }
}
fn goto_arithmeticexpression_s39(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DummyAE => State::DummyAES63,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ArithmeticExpressionS39
            )
        }
    }
}
fn goto_term_s40(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DummyT => State::DummyTS64,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TermS40
            )
        }
    }
}
fn goto_vardeclaration_s45(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::VarDeclarations => State::VarDeclarationsS69,
        NonTermKind::VarDeclaration => State::VarDeclarationS45,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::VarDeclarationS45
            )
        }
    }
}
fn goto_tokennot_s49(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionIsZero => State::FunctionIsZeroS51,
        NonTermKind::BooleanExpression => State::BooleanExpressionS70,
        NonTermKind::SimpleExpression => State::SimpleExpressionS53,
        NonTermKind::Number => State::NumberS38,
        NonTermKind::NotStatement => State::NotStatementS54,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS39,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenNotS49
            )
        }
    }
}
fn goto_simpleexpression_s53(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BooleanExpressionChain => State::BooleanExpressionChainS79,
        NonTermKind::ComparisonOp => State::ComparisonOpS80,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SimpleExpressionS53
            )
        }
    }
}
fn goto_arithmeticexpression_s61(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DummyAE => State::DummyAES63,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ArithmeticExpressionS61
            )
        }
    }
}
fn goto_tokencbopen_s65(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Body => State::BodyS91,
        NonTermKind::FunctionRead => State::FunctionReadS10,
        NonTermKind::FunctionWrite => State::FunctionWriteS11,
        NonTermKind::Expressions => State::ExpressionsS12,
        NonTermKind::Statement => State::StatementS13,
        NonTermKind::Assignment => State::AssignmentS14,
        NonTermKind::WhileLoop => State::WhileLoopS15,
        NonTermKind::IfStatement => State::IfStatementS16,
        NonTermKind::ElseStatement => State::ElseStatementS17,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS65
            )
        }
    }
}
fn goto_tokencolon_s66(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DataType => State::DataTypeS95,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenColonS66
            )
        }
    }
}
fn goto_tokencomma_s67(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::VarDeclaration => State::VarDeclarationS96,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCommaS67
            )
        }
    }
}
fn goto_tokenparopen_s71(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS38,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS97,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenParOpenS71
            )
        }
    }
}
fn goto_booleanexpressionchain_s79(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Conjunction => State::ConjunctionS101,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::BooleanExpressionChainS79
            )
        }
    }
}
fn goto_comparisonop_s80(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::SimpleExpression => State::SimpleExpressionS102,
        NonTermKind::Number => State::NumberS38,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS39,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ComparisonOpS80
            )
        }
    }
}
fn goto_tokensum_s87(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS38,
        NonTermKind::Term => State::TermS105,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenSumS87
            )
        }
    }
}
fn goto_tokensub_s88(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS38,
        NonTermKind::Term => State::TermS106,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenSubS88
            )
        }
    }
}
fn goto_tokenmul_s89(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS38,
        NonTermKind::Factor => State::FactorS107,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenMulS89
            )
        }
    }
}
fn goto_tokendiv_s90(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Number => State::NumberS38,
        NonTermKind::Factor => State::FactorS108,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenDivS90
            )
        }
    }
}
fn goto_arithmeticexpression_s97(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DummyAE => State::DummyAES63,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ArithmeticExpressionS97
            )
        }
    }
}
fn goto_tokencbopen_s98(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Body => State::BodyS111,
        NonTermKind::FunctionRead => State::FunctionReadS10,
        NonTermKind::FunctionWrite => State::FunctionWriteS11,
        NonTermKind::Expressions => State::ExpressionsS12,
        NonTermKind::Statement => State::StatementS13,
        NonTermKind::Assignment => State::AssignmentS14,
        NonTermKind::WhileLoop => State::WhileLoopS15,
        NonTermKind::IfStatement => State::IfStatementS16,
        NonTermKind::ElseStatement => State::ElseStatementS17,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS98
            )
        }
    }
}
fn goto_conjunction_s101(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::FunctionIsZero => State::FunctionIsZeroS51,
        NonTermKind::BooleanExpression => State::BooleanExpressionS112,
        NonTermKind::SimpleExpression => State::SimpleExpressionS53,
        NonTermKind::Number => State::NumberS38,
        NonTermKind::NotStatement => State::NotStatementS54,
        NonTermKind::ArithmeticExpression => State::ArithmeticExpressionS39,
        NonTermKind::Term => State::TermS40,
        NonTermKind::Factor => State::FactorS41,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::ConjunctionS101
            )
        }
    }
}
fn goto_simpleexpression_s102(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::BooleanExpressionChain => State::BooleanExpressionChainS113,
        NonTermKind::ComparisonOp => State::ComparisonOpS80,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::SimpleExpressionS102
            )
        }
    }
}
fn goto_tokencbopen_s103(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::Body => State::BodyS114,
        NonTermKind::FunctionRead => State::FunctionReadS10,
        NonTermKind::FunctionWrite => State::FunctionWriteS11,
        NonTermKind::Expressions => State::ExpressionsS12,
        NonTermKind::Statement => State::StatementS13,
        NonTermKind::Assignment => State::AssignmentS14,
        NonTermKind::WhileLoop => State::WhileLoopS15,
        NonTermKind::IfStatement => State::IfStatementS16,
        NonTermKind::ElseStatement => State::ElseStatementS17,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TokenCBOpenS103
            )
        }
    }
}
fn goto_term_s105(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DummyT => State::DummyTS64,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TermS105
            )
        }
    }
}
fn goto_term_s106(nonterm_kind: NonTermKind) -> State {
    match nonterm_kind {
        NonTermKind::DummyT => State::DummyTS64,
        _ => {
            panic!(
                "Invalid terminal kind ({nonterm_kind:?}) for GOTO state ({:?}).",
                State::TermS106
            )
        }
    }
}
fn goto_invalid(_nonterm_kind: NonTermKind) -> State {
    panic!("Invalid GOTO entry!");
}
pub(crate) static PARSER_DEFINITION: RulesParserDefinition = RulesParserDefinition {
    actions: [
        action_aug_s0,
        action_tokenid_s1,
        action_tokeninit_s2,
        action_tokenwhile_s3,
        action_tokenif_s4,
        action_tokenelse_s5,
        action_tokenread_s6,
        action_tokenwrite_s7,
        action_program_s8,
        action_body_s9,
        action_functionread_s10,
        action_functionwrite_s11,
        action_expressions_s12,
        action_statement_s13,
        action_assignment_s14,
        action_whileloop_s15,
        action_ifstatement_s16,
        action_elsestatement_s17,
        action_tokenassign_s18,
        action_tokenparopen_s19,
        action_tokencbopen_s20,
        action_initbody_s21,
        action_tokenparopen_s22,
        action_tokenparopen_s23,
        action_tokencbopen_s24,
        action_tokenparopen_s25,
        action_tokenparopen_s26,
        action_tokenid_s27,
        action_expressions_s28,
        action_tokenintliteral_s29,
        action_tokenfloatliteral_s30,
        action_tokenstringliteral_s31,
        action_tokenid_s32,
        action_tokensub_s33,
        action_tokenparopen_s34,
        action_tokenconvdate_s35,
        action_functionconvdate_s36,
        action_simpleexpression_s37,
        action_number_s38,
        action_arithmeticexpression_s39,
        action_term_s40,
        action_factor_s41,
        action_tokenparclose_s42,
        action_tokenid_s43,
        action_vardeclarations_s44,
        action_vardeclaration_s45,
        action_expressions_s46,
        action_tokentrue_s47,
        action_tokenfalse_s48,
        action_tokennot_s49,
        action_tokeniszero_s50,
        action_functioniszero_s51,
        action_booleanexpression_s52,
        action_simpleexpression_s53,
        action_notstatement_s54,
        action_booleanexpression_s55,
        action_body_s56,
        action_tokenid_s57,
        action_simpleexpression_s58,
        action_tokenintliteral_s59,
        action_tokenfloatliteral_s60,
        action_arithmeticexpression_s61,
        action_tokenparopen_s62,
        action_dummyae_s63,
        action_dummyt_s64,
        action_tokencbopen_s65,
        action_tokencolon_s66,
        action_tokencomma_s67,
        action_tokencbclose_s68,
        action_vardeclarations_s69,
        action_booleanexpression_s70,
        action_tokenparopen_s71,
        action_tokenparclose_s72,
        action_tokenequal_s73,
        action_tokennotequal_s74,
        action_tokenless_s75,
        action_tokenlessequal_s76,
        action_tokengreater_s77,
        action_tokengreaterequal_s78,
        action_booleanexpressionchain_s79,
        action_comparisonop_s80,
        action_tokenparclose_s81,
        action_tokencbclose_s82,
        action_tokenparclose_s83,
        action_tokenparclose_s84,
        action_tokenparclose_s85,
        action_tokendate_s86,
        action_tokensum_s87,
        action_tokensub_s88,
        action_tokenmul_s89,
        action_tokendiv_s90,
        action_body_s91,
        action_tokenint_s92,
        action_tokenfloat_s93,
        action_tokenstring_s94,
        action_datatype_s95,
        action_vardeclaration_s96,
        action_arithmeticexpression_s97,
        action_tokencbopen_s98,
        action_tokenand_s99,
        action_tokenor_s100,
        action_conjunction_s101,
        action_simpleexpression_s102,
        action_tokencbopen_s103,
        action_tokenparclose_s104,
        action_term_s105,
        action_term_s106,
        action_factor_s107,
        action_factor_s108,
        action_tokencbclose_s109,
        action_tokenparclose_s110,
        action_body_s111,
        action_booleanexpression_s112,
        action_booleanexpressionchain_s113,
        action_body_s114,
        action_tokencbclose_s115,
        action_tokencbclose_s116,
    ],
    gotos: [
        goto_aug_s0,
        goto_invalid,
        goto_tokeninit_s2,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_statement_s13,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokenassign_s18,
        goto_invalid,
        goto_tokencbopen_s20,
        goto_initbody_s21,
        goto_tokenparopen_s22,
        goto_tokenparopen_s23,
        goto_tokencbopen_s24,
        goto_invalid,
        goto_tokenparopen_s26,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokenparopen_s34,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_arithmeticexpression_s39,
        goto_term_s40,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_vardeclaration_s45,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokennot_s49,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_simpleexpression_s53,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_arithmeticexpression_s61,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokencbopen_s65,
        goto_tokencolon_s66,
        goto_tokencomma_s67,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokenparopen_s71,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_booleanexpressionchain_s79,
        goto_comparisonop_s80,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_tokensum_s87,
        goto_tokensub_s88,
        goto_tokenmul_s89,
        goto_tokendiv_s90,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_arithmeticexpression_s97,
        goto_tokencbopen_s98,
        goto_invalid,
        goto_invalid,
        goto_conjunction_s101,
        goto_simpleexpression_s102,
        goto_tokencbopen_s103,
        goto_invalid,
        goto_term_s105,
        goto_term_s106,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
        goto_invalid,
    ],
    token_kinds: [
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenAssign, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenConvDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenAssign, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenColon, false)),
            Some((TK::TokenComma, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::TokenSum, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenDate, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenSum, false)),
            Some((TK::TokenSub, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenMul, false)),
            Some((TK::TokenDiv, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenInt, false)),
            Some((TK::TokenFloat, false)),
            Some((TK::TokenString, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenSum, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenIntLiteral, false)),
            Some((TK::TokenFloatLiteral, false)),
            Some((TK::TokenStringLiteral, false)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenParOpen, false)),
            Some((TK::TokenTrue, false)),
            Some((TK::TokenFalse, false)),
            Some((TK::TokenNot, false)),
            Some((TK::TokenIsZero, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenInit, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenSum, false)),
            Some((TK::TokenMul, false)),
            Some((TK::TokenSub, false)),
            Some((TK::TokenDiv, false)),
            Some((TK::TokenParClose, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenEqual, false)),
            Some((TK::TokenNotEqual, false)),
            Some((TK::TokenLess, false)),
            Some((TK::TokenLessEqual, false)),
            Some((TK::TokenGreater, false)),
            Some((TK::TokenGreaterEqual, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
        ],
        [
            Some((TK::STOP, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenParClose, false)),
            Some((TK::TokenAnd, false)),
            Some((TK::TokenOr, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::TokenCBClose, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
        [
            Some((TK::STOP, true)),
            Some((TK::TokenId, false)),
            Some((TK::TokenCBClose, false)),
            Some((TK::TokenWhile, false)),
            Some((TK::TokenIf, false)),
            Some((TK::TokenElse, false)),
            Some((TK::TokenRead, false)),
            Some((TK::TokenWrite, false)),
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
            None,
        ],
    ],
};
impl ParserDefinition<State, ProdKind, TokenKind, NonTermKind>
for RulesParserDefinition {
    fn actions(&self, state: State, token: TokenKind) -> Vec<Action<State, ProdKind>> {
        PARSER_DEFINITION.actions[state as usize](token)
    }
    fn goto(&self, state: State, nonterm: NonTermKind) -> State {
        PARSER_DEFINITION.gotos[state as usize](nonterm)
    }
    fn expected_token_kinds(&self, state: State) -> Vec<(TokenKind, bool)> {
        PARSER_DEFINITION.token_kinds[state as usize].iter().map_while(|t| *t).collect()
    }
    fn longest_match() -> bool {
        true
    }
    fn grammar_order() -> bool {
        true
    }
}
pub(crate) type Context<'i, I> = LRContext<'i, I, State, TokenKind>;
pub struct RulesParser<
    'i,
    I: InputT + ?Sized,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B,
>(
    LRParser<
        'i,
        Context<'i, I>,
        State,
        ProdKind,
        TokenKind,
        NonTermKind,
        RulesParserDefinition,
        L,
        B,
        I,
    >,
);
#[allow(dead_code)]
impl<'i, L, B> RulesParser<'i, Input, L, B>
where
    L: Lexer<'i, Context<'i, Input>, State, TokenKind, Input = Input>,
    B: LRBuilder<'i, Input, Context<'i, Input>, State, ProdKind, TokenKind>,
{
    pub fn new(lexer: L, builder: B) -> Self {
        Self(
            LRParser::new(
                &PARSER_DEFINITION,
                State::default(),
                false,
                false,
                lexer,
                builder,
            ),
        )
    }
}
#[allow(dead_code)]
impl<'i, I, L, B> Parser<'i, I, Context<'i, I>, State, TokenKind>
for RulesParser<'i, I, L, B>
where
    I: InputT + ?Sized + Debug,
    L: Lexer<'i, Context<'i, I>, State, TokenKind, Input = I>,
    B: LRBuilder<'i, I, Context<'i, I>, State, ProdKind, TokenKind>,
{
    type Output = B::Output;
    fn parse(&self, input: &'i I) -> Result<Self::Output> {
        self.0.parse(input)
    }
    fn parse_with_context(
        &self,
        context: &mut Context<'i, I>,
        input: &'i I,
    ) -> Result<Self::Output> {
        self.0.parse_with_context(context, input)
    }
    fn parse_file<'a, F: AsRef<std::path::Path>>(
        &'a mut self,
        file: F,
    ) -> Result<Self::Output>
    where
        'a: 'i,
    {
        self.0.parse_file(file)
    }
}
